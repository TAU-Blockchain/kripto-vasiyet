{
  "address": "0x37351EbBe3270FbD444B93c5c87e1D17Fb1859E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_inheritableTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_functionsRouter",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_donID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSharesInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedRequest",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_heirs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        }
      ],
      "name": "addHeir",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "functionsRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getHeir",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "heirs",
      "outputs": [
        {
          "internalType": "address",
          "name": "heir",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inheritableTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastError",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResponse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_heirs",
          "type": "address[]"
        }
      ],
      "name": "removeHeir",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heir",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "source",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x784bb66a4725d446678fe1fd9919afbde21e48ebcbccb08097c0b8921ce0f454",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0x37351EbBe3270FbD444B93c5c87e1D17Fb1859E8",
    "transactionIndex": 0,
    "gasUsed": "2643532",
    "logsBloom": "0x
    "blockHash": "0x81201da254ba081b50a1e8ec41468593c6be369f1b4fe40b56fe405b6ee19b90",
    "transactionHash": "0x784bb66a4725d446678fe1fd9919afbde21e48ebcbccb08097c0b8921ce0f454",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4897482,
        "transactionHash": "0x784bb66a4725d446678fe1fd9919afbde21e48ebcbccb08097c0b8921ce0f454",
        "address": "0x37351EbBe3270FbD444B93c5c87e1D17Fb1859E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x81201da254ba081b50a1e8ec41468593c6be369f1b4fe40b56fe405b6ee19b90"
      }
    ],
    "blockNumber": 4897482,
    "cumulativeGasUsed": "2643532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9"
    ],
    "0xb83E47C2bC239B3bf370bc41e1459A34b41238D0",
    "1863",
    "300000",
    "0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f62eda7ea2145f716a504581a97e929",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_inheritableTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_functionsRouter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSharesInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedRequest\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_heirs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"addHeir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionsRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHeir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heirs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"heir\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inheritableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastError\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResponse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_heirs\",\"type\":\"address[]\"}],\"name\":\"removeHeir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heir\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Testament.sol\":\"Testament\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Testament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\r\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\r\\n\\r\\nerror InvalidArrayLength();\\r\\nerror InvalidSharesInput();\\r\\nerror UnexpectedRequest();\\r\\n\\r\\ncontract Testament is Ownable, AutomationCompatibleInterface, FunctionsClient {\\r\\n    using FunctionsRequest for FunctionsRequest.Request;\\r\\n\\r\\n    struct Heir {\\r\\n        address heir;\\r\\n        uint256 share;\\r\\n    }\\r\\n\\r\\n    bool public isAlive = true;\\r\\n\\r\\n    uint256 public latestTimestamp;\\r\\n    uint256 public timeInterval = 2 minutes;\\r\\n\\r\\n    address[] public inheritableTokens;\\r\\n\\r\\n    mapping(address heir => uint256 share) public shares;\\r\\n    uint256 public totalShares;\\r\\n    Heir[] public heirs;\\r\\n\\r\\n    address public functionsRouter;\\r\\n    string public source = \\\"\\\";\\r\\n    uint64 public subscriptionId;\\r\\n    uint32 public gasLimit;\\r\\n    bytes32 public donID;\\r\\n\\r\\n    bytes32 public lastRequestId;\\r\\n    string public lastResponse;\\r\\n    string public lastError;\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _inheritableTokens,\\r\\n        address _functionsRouter,\\r\\n        uint64 _subscriptionId,\\r\\n        uint32 _gasLimit,\\r\\n        bytes32 _donID\\r\\n    ) Ownable(msg.sender) FunctionsClient(_functionsRouter) {\\r\\n        inheritableTokens = _inheritableTokens;\\r\\n        functionsRouter = _functionsRouter;\\r\\n        subscriptionId = _subscriptionId;\\r\\n        gasLimit = _gasLimit;\\r\\n        donID = _donID;\\r\\n    }\\r\\n\\r\\n    function addHeir(\\r\\n        address[] memory _heirs,\\r\\n        uint256[] memory _shares\\r\\n    ) public onlyOwner {\\r\\n        if (_heirs.length != _shares.length) {\\r\\n            revert InvalidArrayLength();\\r\\n        }\\r\\n        uint256 _totalShares = totalShares;\\r\\n        for (uint256 i; i < _heirs.length; i++) {\\r\\n            if (_totalShares - shares[_heirs[i]] + _shares[i] > 100) {\\r\\n                revert InvalidSharesInput();\\r\\n            } else {\\r\\n                totalShares = _shares[i] - shares[_heirs[i]];\\r\\n            }\\r\\n        }\\r\\n        for (uint256 i; i < _heirs.length; i++) {\\r\\n            shares[_heirs[i]] = _shares[i];\\r\\n            bool _isExisted = false;\\r\\n            for (uint256 j; j < heirs.length; j++) {\\r\\n                if (heirs[j].heir == _heirs[i]) {\\r\\n                    heirs[j] = Heir(_heirs[i], _shares[i]);\\r\\n                    _isExisted = true;\\r\\n                }\\r\\n            }\\r\\n            if (!_isExisted) {\\r\\n                heirs.push(Heir(_heirs[i], _shares[i]));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeHeir(address[] memory _heirs) public onlyOwner {\\r\\n        for (uint256 i; i < _heirs.length; i++) {\\r\\n            delete shares[_heirs[i]];\\r\\n            totalShares -= shares[_heirs[i]];\\r\\n            uint256[] memory _indexesToRemove = new uint256[](_heirs.length);\\r\\n            for (uint256 j; j < heirs.length; j++) {\\r\\n                if (heirs[j].heir == _heirs[i]) {\\r\\n                    _indexesToRemove[i] = j;\\r\\n                }\\r\\n            }\\r\\n            for (uint256 k; k < _indexesToRemove.length; k++) {\\r\\n                removeIndex(_indexesToRemove[k]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function requestData() public {\\r\\n        FunctionsRequest.Request memory req;\\r\\n        req.initializeRequestForInlineJavaScript(source);\\r\\n        // string[] memory args = new string[](1);\\r\\n        // if (args.length > 0) req.setArgs(args);\\r\\n        lastRequestId = _sendRequest(\\r\\n            req.encodeCBOR(),\\r\\n            subscriptionId,\\r\\n            gasLimit,\\r\\n            donID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillRequest(\\r\\n        bytes32 _requestId,\\r\\n        bytes memory _response,\\r\\n        bytes memory _err\\r\\n    ) internal override {\\r\\n        if (lastRequestId != _requestId) {\\r\\n            revert UnexpectedRequest();\\r\\n        }\\r\\n        lastResponse = string(_response);\\r\\n        lastError = string(_err);\\r\\n        if (keccak256(_response) == keccak256(bytes(\\\"1\\\"))) {\\r\\n            for (uint256 i; i < inheritableTokens.length; i++) {\\r\\n                IERC20 _token = IERC20(inheritableTokens[i]);\\r\\n                uint256 _balance = _token.balanceOf(owner());\\r\\n                for (uint256 j; j < heirs.length; j++) {\\r\\n                    _token.transferFrom(\\r\\n                        owner(),\\r\\n                        heirs[j].heir,\\r\\n                        ((_balance * heirs[j].share) / 100)\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            isAlive = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        upkeepNeeded =\\r\\n            (isAlive) &&\\r\\n            (block.timestamp - latestTimestamp >= timeInterval);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        requestData();\\r\\n    }\\r\\n\\r\\n    function removeIndex(uint _index) public {\\r\\n        require(_index < heirs.length, \\\"index out of bound\\\");\\r\\n\\r\\n        for (uint i = _index; i < heirs.length - 1; i++) {\\r\\n            heirs[i] = heirs[i + 1];\\r\\n        }\\r\\n        heirs.pop();\\r\\n    }\\r\\n\\r\\n    function getHeir(uint256 _index) public view returns (address) {\\r\\n        return heirs[_index].heir;\\r\\n    }\\r\\n\\r\\n    function getShare(uint256 _index) public view returns (uint256) {\\r\\n        return heirs[_index].share;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74e7fee91e7744904a4376a74928ae692e1e44cafb9086bc7e95b8dfde5d5cfd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200029f5762002f09803803806200001d81620002d5565b92833981019060a0818303126200029f5780516001600160401b0391908281116200029f5781019183601f840112156200029f57825192818411620002bf578360051b946020918262000072818901620002d5565b8097815201908382988201019283116200029f5783809101915b838310620002a457509050620000a591508401620002fb565b936040840151928084168094036200029f5760608501519463ffffffff861686036200029f5760800151953315620002865760008054946040519960018060a01b03809433828a167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08780a31660808190526001600160a81b03199097163360ff60a01b191617600160a01b17835560786002556008546001969080881c90881680156200027b575b848210146200026757601f811162000245575b50600060085551948511620002315768010000000000000000851162000231576003548560035580861062000213575b509260038352818320925b858110620001ff575050505050505060018060a01b031960075416176007556bffffffff00000000000000006009549260401b169160018060601b0319161717600955600a55612bdf90816200032a823960805181818161034f01526117d10152f35b84518216848201559382019386016200019c565b600384528284206200022a91810190870162000310565b3862000191565b634e487b7160e01b83526041600452602483fd5b600885528385206200026091601f0160051c81019062000310565b3862000161565b634e487b7160e01b85526022600452602485fd5b90607f16906200014e565b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b8190620002b184620002fb565b81520191019083906200008c565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620002bf57604052565b51906001600160a01b03821682036200029f57565b8181106200031c575050565b600081556001016200031056fe6080604052600436101561001257600080fd5b60003560e01c806309c1ba2e146101c75780630ca76175146101c257806312f53de2146101bd5780631c0795c3146101b857806329f0de3f146101b35780633a98ef39146101ae5780634136aa35146101a95780634585e33b146101a4578063606deecd1461019f57806362747e421461019a57806367e828bf146101955780636e04ff0d146101905780636e74336b1461018b578063715018a6146101865780638205bf6a146101815780638da5cb5b1461017c5780638eff4cde146101775780638f51643814610172578063975c23081461016d578063a429253514610168578063ce7c2ac214610163578063cfb5a5f81461015e578063d58f05da14610159578063f2fde38b14610154578063f53d9ec11461014f578063f68016b71461014a5763fc2a88c31461014557600080fd5b611298565b611271565b611255565b611191565b61115d565b611132565b6110eb565b610f7e565b610f40565b610f22565b610ebb565b610e50565b610e32565b610db3565b610d95565b610d26565b610cf6565b610c4f565b610c36565b610c1e565b610bae565b610b90565b610a8d565b610867565b610754565b6102e9565b346101ef5760006003193601126101ef57602067ffffffffffffffff60095416604051908152f35b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60e0810190811067ffffffffffffffff82111761023f57604052565b6101f4565b6040810190811067ffffffffffffffff82111761023f57604052565b90601f601f19910116810190811067ffffffffffffffff82111761023f57604052565b6040519061029082610244565b565b81601f820112156101ef5780359067ffffffffffffffff821161023f57604051926102c76020601f19601f8601160185610260565b828452602083830101116101ef57816000926020809301838601378301015290565b346101ef5760606003193601126101ef57600480359067ffffffffffffffff906024358281116101ef576103209036908301610292565b916044359081116101ef576103389036908301610292565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036106755783600b540361064c576103909061038b846127f9565b6128e2565b81516020809301206103a06129cb565b838151910120146103d4575b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b600092915b6003548410156106145761049d6104316104186104186103f888610e84565b905473ffffffffffffffffffffffffffffffffffffffff9160031b1c1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1694836040968751809581927f70a0823100000000000000000000000000000000000000000000000000000000835289830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9283156105c9576000936105e5575b5060005b6006548110156105ce5760005473ffffffffffffffffffffffffffffffffffffffff1690856105016104e683610828565b505473ffffffffffffffffffffffffffffffffffffffff1690565b61052261051b600161051286610828565b50015489611d7a565b6064900490565b8a517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9586168b820190815292909516602083015260408201528390819060600103816000885af19182156105c9576105979261059c575b50611544565b6104b5565b6105bb90873d89116105c2575b6105b38183610260565b810190612a04565b5038610591565b503d6105a9565b61173e565b50959150506105de919350611544565b92916103d9565b610606919350843d861161060d575b6105fe8183610260565b81019061172f565b91386104b1565b503d6105f4565b505090506106457fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60005416600055565b38806103ac565b506040517f290274c9000000000000000000000000000000000000000000000000000000008152fd5b506040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b67ffffffffffffffff811161023f5760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101ef57565b81601f820112156101ef578035916106f08361069e565b926106fe6040519485610260565b808452602092838086019260051b8201019283116101ef578301905b828210610728575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036101ef57815290830190830161071a565b346101ef5760406003193601126101ef5767ffffffffffffffff6004358181116101ef576107869036906004016106d9565b906024359081116101ef57366023820112156101ef5780600401356107aa8161069e565b916107b86040519384610260565b81835260209160248385019160051b830101913683116101ef57602401905b8282106107ea576107e88587611307565b005b813581529083019083016107d7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60065481101561086257600660005260011b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b6107f9565b346101ef5760206003193601126101ef576004356006548110156101ef57610890604091610828565b50600173ffffffffffffffffffffffffffffffffffffffff82541691015482519182526020820152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b90600182811c92168015610932575b602083101461090357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916108f8565b6040519060008260085491610950836108e9565b808352926001908181169081156109d65750600114610977575b5061029092500383610260565b6008600090815291507ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee35b8483106109bb575061029093505081016020013861096a565b81935090816020925483858a010152019101909185926109a2565b602093506102909592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013861096a565b60005b828110610a2857506000910152565b608081015182820152602001610a19565b919082519283825260005b848110610a65575050601f19601f8460006020809697860101520116010190565b602081830181015184830182015201610a44565b906020610a8a928181520190610a39565b90565b346101ef57600080600319360112610b8d576040519080600d54610ab0816108e9565b80855291600191808316908115610b455750600114610aea575b610ae685610ada81870382610260565b60405191829182610a79565b0390f35b9250600d83527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b828410610b2d575050508101602001610ada82610ae6610aca565b80546020858701810191909152909301928101610b12565b869550610ae696935060209250610ada9491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610aca565b80fd5b346101ef5760006003193601126101ef576020600554604051908152f35b346101ef5760006003193601126101ef57602060ff60005460a01c166040519015158152f35b9060206003198301126101ef5760043567ffffffffffffffff928382116101ef57806023830112156101ef5781600401359384116101ef57602484830101116101ef576024019190565b346101ef57610c2c36610bd4565b50506107e8611679565b346101ef5760006003193601126101ef576107e8611679565b346101ef57600080600319360112610b8d576040519080600c54610c72816108e9565b80855291600191808316908115610b455750600114610c9b57610ae685610ada81870382610260565b9250600c83527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c75b828410610cde575050508101602001610ada82610ae6610aca565b80546020858701810191909152909301928101610cc3565b346101ef5760006003193601126101ef57610ae6610d1261093c565b604051918291602083526020830190610a39565b346101ef57610d3436610bd4565b505060ff60005460a01c1680610d79575b604051901515815260406020820152606081601f19601f8351806040850152610d7081868601610a16565b01168101030190f35b506001544203428111610d90576002541115610d45565b611515565b346101ef5760006003193601126101ef576020600a54604051908152f35b346101ef57600080600319360112610b8d57610dcd6112b6565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346101ef5760006003193601126101ef576020600154604051908152f35b346101ef5760006003193601126101ef57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6003548110156108625760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b346101ef5760206003193601126101ef576004356003548110156101ef5773ffffffffffffffffffffffffffffffffffffffff60209160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b015416604051908152f35b346101ef5760006003193601126101ef576020600254604051908152f35b346101ef5760206003193601126101ef57602073ffffffffffffffffffffffffffffffffffffffff610f73600435610828565b505416604051908152f35b346101ef5760206003193601126101ef5760043567ffffffffffffffff81116101ef57610faf9036906004016106d9565b610fb76112b6565b60005b81518110156107e8576000611015610fef610fd58486611553565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166000526004602052604060002090565b5561103a61103561102c610fef610fd58587611553565b54600554611585565b600555565b6110448251611648565b600654909260005b8281106110945750905060005b8351811015611083578061107961107361107e9387611553565b51612aec565b611544565b611059565b50915061108f90611544565b610fba565b806110a46104e66110d593610828565b73ffffffffffffffffffffffffffffffffffffffff6110c9610418610fd58988611553565b9116146110da57611544565b61104c565b806110e58688611553565b52611544565b346101ef5760206003193601126101ef5773ffffffffffffffffffffffffffffffffffffffff6111196106b6565b1660005260046020526020604060002054604051908152f35b346101ef5760206003193601126101ef5760206001611152600435610828565b500154604051908152f35b346101ef5760006003193601126101ef57602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b346101ef5760206003193601126101ef576111aa6106b6565b6111b26112b6565b73ffffffffffffffffffffffffffffffffffffffff8091168015611224576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b346101ef5760206003193601126101ef576107e8600435612aec565b346101ef5760006003193601126101ef57602060095463ffffffff6040519160401c168152f35b346101ef5760006003193601126101ef576020600b54604051908152f35b73ffffffffffffffffffffffffffffffffffffffff6000541633036112d757565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b9190916113126112b6565b80518351036114eb5760055460005b82518110156113bb57606461135a611349611342610fef610fd58689611553565b5485611585565b6113538489611553565b51906115a0565b111561138a5760046040517f3e996863000000000000000000000000000000000000000000000000000000008152fd5b8061107961103561139e6113b69489611553565b516113af610fef610fd5868a611553565b5490611585565b611321565b505090916000905b82518210156114e6576113d68282611553565b516113e7610fef610fd58587611553565b55600093845b60065481101561149e576114036104e682610828565b73ffffffffffffffffffffffffffffffffffffffff611428610418610fd5888a611553565b91161461143e575b61143990611544565b6113ed565b9450611496611450610fd58587611553565b61145a8585611553565b51611482611466610283565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b602082015261149087610828565b906115ad565b600194611430565b50916114af9194156114b657611544565b90926113c3565b6110796114c6610fd58387611553565b6114d08388611553565b516114dc611466610283565b6020820152611620565b505050565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000198114610d905760010190565b80518210156108625760209160051b010190565b90601f198201918211610d9057565b906000198201918211610d9057565b91908203918211610d9057565b9060208201809211610d9057565b91908201809211610d9057565b919061161b5760208161161473ffffffffffffffffffffffffffffffffffffffff6001945116859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b0151910155565b6108ba565b600654906801000000000000000082101561023f576114908260016102909401600655610828565b906116528261069e565b61165f6040519182610260565b828152601f1961166f829461069e565b0190602036910137565b60405161168581610223565b6000815260006020820152604081016000815260608201906060825260606080840152606060a0840152606060c08401526116be61093c565b9283511561170557610290936117009360006116de948185525252611a21565b600954600a549167ffffffffffffffff63ffffffff8360401c1692169061174a565b600b55565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b908160209103126101ef575190565b6040513d6000823e3d90fd5b929060209267ffffffffffffffff9263ffffffff6117a360405197889687967f461d276200000000000000000000000000000000000000000000000000000000885216600487015260a0602487015260a4860190610a39565b926001604486015216606484015260848301520381600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156105c95760009161182c575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b611844915060203d811161060d576105fe8183610260565b38611802565b6040519061185782610244565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600311156118bc57565b611883565b604051906118ce82610244565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b600111156118bc57565b6040519061191182610244565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b6040519061194a82610244565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b6040519061198382610244565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b604051906119bc82610244565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b604051906119f582610244565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b611a29611c21565b90611a3b611a3561184a565b83612369565b611a588151611a49816118b2565b611a52816118b2565b83611cc3565b611a63611a356118c1565b611a7d6040820151611a74816118fa565b611a52816118fa565b611a88611a35611904565b611a96606082015183612369565b60a08101805151611bae575b506080810190815151611b16575b60c0915001805151611ac3575b50515190565b91611acf611a356119e8565b611ad8826123ee565b60005b83518051821015611b035790611079611af782611afe94611553565b51856122b3565b611adb565b50509150611b108161247a565b38611abd565b602081018051611b25816118b2565b611b2e816118b2565b15611b845760c092611b67611b7f92611b4e611b48611976565b88612369565b51611b58816118b2565b611b61816118b2565b86611cc3565b611b78611b726119af565b86612369565b51846122b3565b611ab0565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b92611bc0611bba61193d565b84612369565b611bc9836123ee565b60005b84518051821015611bf45790611079611be882611bef94611553565b5186612369565b611bcc565b50509250611c018261247a565b38611aa2565b60405190611c1482610244565b6000602083606081520152565b604051611c2d81610244565b611c35611c07565b8082526020820160008152611c48611c07565b5061010060208301526040518092526000825261012082019182106101ef576000916040525290565b90611c7a611c07565b50601f811680611ca9575b50806020830152604051908183526000825281016020019081106101ef5760405290565b60200360208111610d90578101809111610d905738611c85565b90815191611ccf611c07565b508251516001810190818111610d90576020850151811015611d28575b60c260206102909651928301015380518211611d20575b505060405191602083015260208252611d1b82610244565b6122b3565b523880611d03565b8160011b9482860460021483151715610d9057602081611d5a61029098611d5360c295519184611c71565b50826121f7565b5096505050611cec565b908160011b9180830460021490151715610d9057565b81810292918115918404141715610d9057565b611d95611c07565b508051516001810190818111610d90576020830151811015611dce575b605b60208451928301015380518211611dca57505090565b5290565b8160011b82810460021483151715610d9057611df790611df085519186611c71565b50846121f7565b50611db2565b611e05611c07565b508051516001810190818111610d90576020830151811015611e3a575b605a60208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611e5c90611df085519186611c71565b50611e22565b611e6a611c07565b508051516001810190818111610d90576020830151811015611e9f575b605960208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611ec190611df085519186611c71565b50611e87565b611ecf611c07565b508051516001810190818111610d90576020830151811015611f04575b605860208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611f2690611df085519186611c71565b50611eec565b611f34611c07565b508051516001810190818111610d90576020830151811015611f69575b607b60208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611f8b90611df085519186611c71565b50611f51565b611f99611c07565b508051516001810190818111610d90576020830151811015611fce575b607a60208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611ff090611df085519186611c71565b50611fb6565b611ffe611c07565b508051516001810190818111610d90576020830151811015612033575b607960208451928301015380518211611dca57505090565b8160011b82810460021483151715610d905761205590611df085519186611c71565b5061201b565b612063611c07565b508051516001810190818111610d90576020830151811015612098575b607860208451928301015380518211611dca57505090565b8160011b82810460021483151715610d90576120ba90611df085519186611c71565b50612080565b906120c9611c07565b508151516001810191828211610d905760208401518210156120fc575b60208451928301015380518211611dca57505090565b8260011b83810460021484151715610d90576121259061211e86519187611c71565b50856121f7565b506120e6565b9061213882519183611c71565b50612141611c07565b50805161214c611c07565b5061215a82518211156122ac565b8251519261216882856115a0565b9260209382858094015182116121e0575b51838151978201019682116121d8575b505001915b808210156121b0579060001991036101000a0190811990511690825116179052565b9091926121cc6121c66121d29286518152611592565b94611592565b92611567565b9061218e565b523880612189565b6121f26121ec83611d64565b8261212b565b612179565b90612200611c07565b5080519061220c611c07565b5061221a81518311156122ac565b8251519161222881846115a0565b6020928391828701518111612295575b86518381519782010196821161228d575b505001915b80821015612271579060001991036101000a019081199051169082511617905290565b9091926121cc6121c66122879286518152611592565b9061224e565b523880612249565b6122a76122a182611d64565b8861212b565b612238565b156101ef57565b81516122eb92919067ffffffffffffffff811690601782116122ee576122e39150604060ff8451921617906120c0565b505b516121f7565b50565b5060ff81116123135761230d906123058351611ec7565b508251612693565b506122e5565b61ffff81116123325761230d9061232a8351611e62565b50825161260f565b63ffffffff81116123535761230d9061234b8351611dfd565b50825161258b565b61230d906123618351611d8d565b508251612507565b81516122eb92919067ffffffffffffffff81169060178211612399576122e39150606060ff8451921617906120c0565b5060ff81116123b05761230d90612305835161205b565b61ffff81116123c75761230d9061232a8351611ff6565b63ffffffff81116123e05761230d9061234b8351611f91565b61230d906123618351611f2c565b8051906123f9611c07565b508151516001810190818111610d90576020840151811015612447575b609f602080955192830101538051821161243f575b50500180519060018201809211610d905752565b52388061242b565b8160011b9382850460021483151715610d90576020816124708297611d53609f95519184611c71565b5095505050612416565b805190612485611c07565b508151516001810190818111610d905760208401518110156124d4575b60ff60208095519283010153805182116124cc575b5050018051906000198201918211610d905752565b5238806124b7565b8160011b9382850460021483151715610d90576020816124fd8297611d5360ff95519184611c71565b50955050506124a2565b90612510611c07565b50815151806008019182600811610d90576020840151831161256a575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082511617905280518211611dca57505090565b8260011b83810460021484151715610d9057612586908561212b565b61252d565b90612594611c07565b50815151806004019182600411610d9057602084015183116125ee575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082511617905280518211611dca57505090565b8260011b83810460021484151715610d905761260a908561212b565b6125b1565b90612618611c07565b50815151806002019182600211610d905760208401518311612672575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000082511617905280518211611dca57505090565b8260011b83810460021484151715610d905761268e908561212b565b612635565b9061269c611c07565b50815151806001019182600111610d9057602084015183116126f6575b6001845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082511617905280518211611dca57505090565b8260011b83810460021484151715610d9057612712908561212b565b6126b9565b601f8111612723575050565b600090600c82527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7906020601f850160051c8301941061277e575b601f0160051c01915b82811061277357505050565b818155600101612767565b909250829061275e565b601f8111612794575050565b600090600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5906020601f850160051c830194106127ef575b601f0160051c01915b8281106127e457505050565b8181556001016127d8565b90925082906127cf565b90815167ffffffffffffffff811161023f5761281f8161281a600c546108e9565b612717565b602080601f831160011461285a575081929360009261284f575b50506000198260011b9260031b1c191617600c55565b015190503880612839565b90601f1983169461288d600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790565b926000905b8782106128ca5750508360019596106128b1575b505050811b01600c55565b015160001960f88460031b161c191690553880806128a6565b80600185968294968601518155019501930190612892565b90815167ffffffffffffffff811161023f5761290881612903600d546108e9565b612788565b602080601f83116001146129435750819293600092612938575b50506000198260011b9260031b1c191617600d55565b015190503880612922565b90601f19831694612976600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590565b926000905b8782106129b357505083600195961061299a575b505050811b01600d55565b015160001960f88460031b161c1916905538808061298f565b8060018596829496860151815501950193019061297b565b604051906129d882610244565b600182527f31000000000000000000000000000000000000000000000000000000000000006020830152565b908160209103126101ef575180151581036101ef5790565b919061161b57808203612a2d575050565b600181612a8d73ffffffffffffffffffffffffffffffffffffffff83945416859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b0154910155565b6006548015612abd5760001901612aaa81610828565b61161b5760018160008093550155600655565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b906006918254811015612b4b575b612b048354611576565b811015612b405760018101808211610d9057612b0491611079612b29612b3993610828565b50612b3383610828565b90612a1c565b9050612afa565b509050610290612a94565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e646578206f7574206f6620626f756e6400000000000000000000000000006044820152fdfea264697066735822122097277c62c3d9a2644926ca11b58793ce89e3cfe77333d890cbeac047b75be5f964736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806309c1ba2e146101c75780630ca76175146101c257806312f53de2146101bd5780631c0795c3146101b857806329f0de3f146101b35780633a98ef39146101ae5780634136aa35146101a95780634585e33b146101a4578063606deecd1461019f57806362747e421461019a57806367e828bf146101955780636e04ff0d146101905780636e74336b1461018b578063715018a6146101865780638205bf6a146101815780638da5cb5b1461017c5780638eff4cde146101775780638f51643814610172578063975c23081461016d578063a429253514610168578063ce7c2ac214610163578063cfb5a5f81461015e578063d58f05da14610159578063f2fde38b14610154578063f53d9ec11461014f578063f68016b71461014a5763fc2a88c31461014557600080fd5b611298565b611271565b611255565b611191565b61115d565b611132565b6110eb565b610f7e565b610f40565b610f22565b610ebb565b610e50565b610e32565b610db3565b610d95565b610d26565b610cf6565b610c4f565b610c36565b610c1e565b610bae565b610b90565b610a8d565b610867565b610754565b6102e9565b346101ef5760006003193601126101ef57602067ffffffffffffffff60095416604051908152f35b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60e0810190811067ffffffffffffffff82111761023f57604052565b6101f4565b6040810190811067ffffffffffffffff82111761023f57604052565b90601f601f19910116810190811067ffffffffffffffff82111761023f57604052565b6040519061029082610244565b565b81601f820112156101ef5780359067ffffffffffffffff821161023f57604051926102c76020601f19601f8601160185610260565b828452602083830101116101ef57816000926020809301838601378301015290565b346101ef5760606003193601126101ef57600480359067ffffffffffffffff906024358281116101ef576103209036908301610292565b916044359081116101ef576103389036908301610292565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036106755783600b540361064c576103909061038b846127f9565b6128e2565b81516020809301206103a06129cb565b838151910120146103d4575b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b600092915b6003548410156106145761049d6104316104186104186103f888610e84565b905473ffffffffffffffffffffffffffffffffffffffff9160031b1c1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1694836040968751809581927f70a0823100000000000000000000000000000000000000000000000000000000835289830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9283156105c9576000936105e5575b5060005b6006548110156105ce5760005473ffffffffffffffffffffffffffffffffffffffff1690856105016104e683610828565b505473ffffffffffffffffffffffffffffffffffffffff1690565b61052261051b600161051286610828565b50015489611d7a565b6064900490565b8a517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9586168b820190815292909516602083015260408201528390819060600103816000885af19182156105c9576105979261059c575b50611544565b6104b5565b6105bb90873d89116105c2575b6105b38183610260565b810190612a04565b5038610591565b503d6105a9565b61173e565b50959150506105de919350611544565b92916103d9565b610606919350843d861161060d575b6105fe8183610260565b81019061172f565b91386104b1565b503d6105f4565b505090506106457fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60005416600055565b38806103ac565b506040517f290274c9000000000000000000000000000000000000000000000000000000008152fd5b506040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b67ffffffffffffffff811161023f5760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101ef57565b81601f820112156101ef578035916106f08361069e565b926106fe6040519485610260565b808452602092838086019260051b8201019283116101ef578301905b828210610728575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036101ef57815290830190830161071a565b346101ef5760406003193601126101ef5767ffffffffffffffff6004358181116101ef576107869036906004016106d9565b906024359081116101ef57366023820112156101ef5780600401356107aa8161069e565b916107b86040519384610260565b81835260209160248385019160051b830101913683116101ef57602401905b8282106107ea576107e88587611307565b005b813581529083019083016107d7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60065481101561086257600660005260011b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b6107f9565b346101ef5760206003193601126101ef576004356006548110156101ef57610890604091610828565b50600173ffffffffffffffffffffffffffffffffffffffff82541691015482519182526020820152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b90600182811c92168015610932575b602083101461090357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916108f8565b6040519060008260085491610950836108e9565b808352926001908181169081156109d65750600114610977575b5061029092500383610260565b6008600090815291507ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee35b8483106109bb575061029093505081016020013861096a565b81935090816020925483858a010152019101909185926109a2565b602093506102909592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013861096a565b60005b828110610a2857506000910152565b608081015182820152602001610a19565b919082519283825260005b848110610a65575050601f19601f8460006020809697860101520116010190565b602081830181015184830182015201610a44565b906020610a8a928181520190610a39565b90565b346101ef57600080600319360112610b8d576040519080600d54610ab0816108e9565b80855291600191808316908115610b455750600114610aea575b610ae685610ada81870382610260565b60405191829182610a79565b0390f35b9250600d83527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b828410610b2d575050508101602001610ada82610ae6610aca565b80546020858701810191909152909301928101610b12565b869550610ae696935060209250610ada9491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610aca565b80fd5b346101ef5760006003193601126101ef576020600554604051908152f35b346101ef5760006003193601126101ef57602060ff60005460a01c166040519015158152f35b9060206003198301126101ef5760043567ffffffffffffffff928382116101ef57806023830112156101ef5781600401359384116101ef57602484830101116101ef576024019190565b346101ef57610c2c36610bd4565b50506107e8611679565b346101ef5760006003193601126101ef576107e8611679565b346101ef57600080600319360112610b8d576040519080600c54610c72816108e9565b80855291600191808316908115610b455750600114610c9b57610ae685610ada81870382610260565b9250600c83527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c75b828410610cde575050508101602001610ada82610ae6610aca565b80546020858701810191909152909301928101610cc3565b346101ef5760006003193601126101ef57610ae6610d1261093c565b604051918291602083526020830190610a39565b346101ef57610d3436610bd4565b505060ff60005460a01c1680610d79575b604051901515815260406020820152606081601f19601f8351806040850152610d7081868601610a16565b01168101030190f35b506001544203428111610d90576002541115610d45565b611515565b346101ef5760006003193601126101ef576020600a54604051908152f35b346101ef57600080600319360112610b8d57610dcd6112b6565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346101ef5760006003193601126101ef576020600154604051908152f35b346101ef5760006003193601126101ef57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6003548110156108625760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b346101ef5760206003193601126101ef576004356003548110156101ef5773ffffffffffffffffffffffffffffffffffffffff60209160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b015416604051908152f35b346101ef5760006003193601126101ef576020600254604051908152f35b346101ef5760206003193601126101ef57602073ffffffffffffffffffffffffffffffffffffffff610f73600435610828565b505416604051908152f35b346101ef5760206003193601126101ef5760043567ffffffffffffffff81116101ef57610faf9036906004016106d9565b610fb76112b6565b60005b81518110156107e8576000611015610fef610fd58486611553565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166000526004602052604060002090565b5561103a61103561102c610fef610fd58587611553565b54600554611585565b600555565b6110448251611648565b600654909260005b8281106110945750905060005b8351811015611083578061107961107361107e9387611553565b51612aec565b611544565b611059565b50915061108f90611544565b610fba565b806110a46104e66110d593610828565b73ffffffffffffffffffffffffffffffffffffffff6110c9610418610fd58988611553565b9116146110da57611544565b61104c565b806110e58688611553565b52611544565b346101ef5760206003193601126101ef5773ffffffffffffffffffffffffffffffffffffffff6111196106b6565b1660005260046020526020604060002054604051908152f35b346101ef5760206003193601126101ef5760206001611152600435610828565b500154604051908152f35b346101ef5760006003193601126101ef57602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b346101ef5760206003193601126101ef576111aa6106b6565b6111b26112b6565b73ffffffffffffffffffffffffffffffffffffffff8091168015611224576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b346101ef5760206003193601126101ef576107e8600435612aec565b346101ef5760006003193601126101ef57602060095463ffffffff6040519160401c168152f35b346101ef5760006003193601126101ef576020600b54604051908152f35b73ffffffffffffffffffffffffffffffffffffffff6000541633036112d757565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b9190916113126112b6565b80518351036114eb5760055460005b82518110156113bb57606461135a611349611342610fef610fd58689611553565b5485611585565b6113538489611553565b51906115a0565b111561138a5760046040517f3e996863000000000000000000000000000000000000000000000000000000008152fd5b8061107961103561139e6113b69489611553565b516113af610fef610fd5868a611553565b5490611585565b611321565b505090916000905b82518210156114e6576113d68282611553565b516113e7610fef610fd58587611553565b55600093845b60065481101561149e576114036104e682610828565b73ffffffffffffffffffffffffffffffffffffffff611428610418610fd5888a611553565b91161461143e575b61143990611544565b6113ed565b9450611496611450610fd58587611553565b61145a8585611553565b51611482611466610283565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b602082015261149087610828565b906115ad565b600194611430565b50916114af9194156114b657611544565b90926113c3565b6110796114c6610fd58387611553565b6114d08388611553565b516114dc611466610283565b6020820152611620565b505050565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000198114610d905760010190565b80518210156108625760209160051b010190565b90601f198201918211610d9057565b906000198201918211610d9057565b91908203918211610d9057565b9060208201809211610d9057565b91908201809211610d9057565b919061161b5760208161161473ffffffffffffffffffffffffffffffffffffffff6001945116859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b0151910155565b6108ba565b600654906801000000000000000082101561023f576114908260016102909401600655610828565b906116528261069e565b61165f6040519182610260565b828152601f1961166f829461069e565b0190602036910137565b60405161168581610223565b6000815260006020820152604081016000815260608201906060825260606080840152606060a0840152606060c08401526116be61093c565b9283511561170557610290936117009360006116de948185525252611a21565b600954600a549167ffffffffffffffff63ffffffff8360401c1692169061174a565b600b55565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b908160209103126101ef575190565b6040513d6000823e3d90fd5b929060209267ffffffffffffffff9263ffffffff6117a360405197889687967f461d276200000000000000000000000000000000000000000000000000000000885216600487015260a0602487015260a4860190610a39565b926001604486015216606484015260848301520381600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156105c95760009161182c575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b611844915060203d811161060d576105fe8183610260565b38611802565b6040519061185782610244565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600311156118bc57565b611883565b604051906118ce82610244565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b600111156118bc57565b6040519061191182610244565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b6040519061194a82610244565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b6040519061198382610244565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b604051906119bc82610244565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b604051906119f582610244565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b611a29611c21565b90611a3b611a3561184a565b83612369565b611a588151611a49816118b2565b611a52816118b2565b83611cc3565b611a63611a356118c1565b611a7d6040820151611a74816118fa565b611a52816118fa565b611a88611a35611904565b611a96606082015183612369565b60a08101805151611bae575b506080810190815151611b16575b60c0915001805151611ac3575b50515190565b91611acf611a356119e8565b611ad8826123ee565b60005b83518051821015611b035790611079611af782611afe94611553565b51856122b3565b611adb565b50509150611b108161247a565b38611abd565b602081018051611b25816118b2565b611b2e816118b2565b15611b845760c092611b67611b7f92611b4e611b48611976565b88612369565b51611b58816118b2565b611b61816118b2565b86611cc3565b611b78611b726119af565b86612369565b51846122b3565b611ab0565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b92611bc0611bba61193d565b84612369565b611bc9836123ee565b60005b84518051821015611bf45790611079611be882611bef94611553565b5186612369565b611bcc565b50509250611c018261247a565b38611aa2565b60405190611c1482610244565b6000602083606081520152565b604051611c2d81610244565b611c35611c07565b8082526020820160008152611c48611c07565b5061010060208301526040518092526000825261012082019182106101ef576000916040525290565b90611c7a611c07565b50601f811680611ca9575b50806020830152604051908183526000825281016020019081106101ef5760405290565b60200360208111610d90578101809111610d905738611c85565b90815191611ccf611c07565b508251516001810190818111610d90576020850151811015611d28575b60c260206102909651928301015380518211611d20575b505060405191602083015260208252611d1b82610244565b6122b3565b523880611d03565b8160011b9482860460021483151715610d9057602081611d5a61029098611d5360c295519184611c71565b50826121f7565b5096505050611cec565b908160011b9180830460021490151715610d9057565b81810292918115918404141715610d9057565b611d95611c07565b508051516001810190818111610d90576020830151811015611dce575b605b60208451928301015380518211611dca57505090565b5290565b8160011b82810460021483151715610d9057611df790611df085519186611c71565b50846121f7565b50611db2565b611e05611c07565b508051516001810190818111610d90576020830151811015611e3a575b605a60208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611e5c90611df085519186611c71565b50611e22565b611e6a611c07565b508051516001810190818111610d90576020830151811015611e9f575b605960208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611ec190611df085519186611c71565b50611e87565b611ecf611c07565b508051516001810190818111610d90576020830151811015611f04575b605860208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611f2690611df085519186611c71565b50611eec565b611f34611c07565b508051516001810190818111610d90576020830151811015611f69575b607b60208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611f8b90611df085519186611c71565b50611f51565b611f99611c07565b508051516001810190818111610d90576020830151811015611fce575b607a60208451928301015380518211611dca57505090565b8160011b82810460021483151715610d9057611ff090611df085519186611c71565b50611fb6565b611ffe611c07565b508051516001810190818111610d90576020830151811015612033575b607960208451928301015380518211611dca57505090565b8160011b82810460021483151715610d905761205590611df085519186611c71565b5061201b565b612063611c07565b508051516001810190818111610d90576020830151811015612098575b607860208451928301015380518211611dca57505090565b8160011b82810460021483151715610d90576120ba90611df085519186611c71565b50612080565b906120c9611c07565b508151516001810191828211610d905760208401518210156120fc575b60208451928301015380518211611dca57505090565b8260011b83810460021484151715610d90576121259061211e86519187611c71565b50856121f7565b506120e6565b9061213882519183611c71565b50612141611c07565b50805161214c611c07565b5061215a82518211156122ac565b8251519261216882856115a0565b9260209382858094015182116121e0575b51838151978201019682116121d8575b505001915b808210156121b0579060001991036101000a0190811990511690825116179052565b9091926121cc6121c66121d29286518152611592565b94611592565b92611567565b9061218e565b523880612189565b6121f26121ec83611d64565b8261212b565b612179565b90612200611c07565b5080519061220c611c07565b5061221a81518311156122ac565b8251519161222881846115a0565b6020928391828701518111612295575b86518381519782010196821161228d575b505001915b80821015612271579060001991036101000a019081199051169082511617905290565b9091926121cc6121c66122879286518152611592565b9061224e565b523880612249565b6122a76122a182611d64565b8861212b565b612238565b156101ef57565b81516122eb92919067ffffffffffffffff811690601782116122ee576122e39150604060ff8451921617906120c0565b505b516121f7565b50565b5060ff81116123135761230d906123058351611ec7565b508251612693565b506122e5565b61ffff81116123325761230d9061232a8351611e62565b50825161260f565b63ffffffff81116123535761230d9061234b8351611dfd565b50825161258b565b61230d906123618351611d8d565b508251612507565b81516122eb92919067ffffffffffffffff81169060178211612399576122e39150606060ff8451921617906120c0565b5060ff81116123b05761230d90612305835161205b565b61ffff81116123c75761230d9061232a8351611ff6565b63ffffffff81116123e05761230d9061234b8351611f91565b61230d906123618351611f2c565b8051906123f9611c07565b508151516001810190818111610d90576020840151811015612447575b609f602080955192830101538051821161243f575b50500180519060018201809211610d905752565b52388061242b565b8160011b9382850460021483151715610d90576020816124708297611d53609f95519184611c71565b5095505050612416565b805190612485611c07565b508151516001810190818111610d905760208401518110156124d4575b60ff60208095519283010153805182116124cc575b5050018051906000198201918211610d905752565b5238806124b7565b8160011b9382850460021483151715610d90576020816124fd8297611d5360ff95519184611c71565b50955050506124a2565b90612510611c07565b50815151806008019182600811610d90576020840151831161256a575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082511617905280518211611dca57505090565b8260011b83810460021484151715610d9057612586908561212b565b61252d565b90612594611c07565b50815151806004019182600411610d9057602084015183116125ee575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082511617905280518211611dca57505090565b8260011b83810460021484151715610d905761260a908561212b565b6125b1565b90612618611c07565b50815151806002019182600211610d905760208401518311612672575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000082511617905280518211611dca57505090565b8260011b83810460021484151715610d905761268e908561212b565b612635565b9061269c611c07565b50815151806001019182600111610d9057602084015183116126f6575b6001845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082511617905280518211611dca57505090565b8260011b83810460021484151715610d9057612712908561212b565b6126b9565b601f8111612723575050565b600090600c82527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7906020601f850160051c8301941061277e575b601f0160051c01915b82811061277357505050565b818155600101612767565b909250829061275e565b601f8111612794575050565b600090600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5906020601f850160051c830194106127ef575b601f0160051c01915b8281106127e457505050565b8181556001016127d8565b90925082906127cf565b90815167ffffffffffffffff811161023f5761281f8161281a600c546108e9565b612717565b602080601f831160011461285a575081929360009261284f575b50506000198260011b9260031b1c191617600c55565b015190503880612839565b90601f1983169461288d600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790565b926000905b8782106128ca5750508360019596106128b1575b505050811b01600c55565b015160001960f88460031b161c191690553880806128a6565b80600185968294968601518155019501930190612892565b90815167ffffffffffffffff811161023f5761290881612903600d546108e9565b612788565b602080601f83116001146129435750819293600092612938575b50506000198260011b9260031b1c191617600d55565b015190503880612922565b90601f19831694612976600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590565b926000905b8782106129b357505083600195961061299a575b505050811b01600d55565b015160001960f88460031b161c1916905538808061298f565b8060018596829496860151815501950193019061297b565b604051906129d882610244565b600182527f31000000000000000000000000000000000000000000000000000000000000006020830152565b908160209103126101ef575180151581036101ef5790565b919061161b57808203612a2d575050565b600181612a8d73ffffffffffffffffffffffffffffffffffffffff83945416859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b0154910155565b6006548015612abd5760001901612aaa81610828565b61161b5760018160008093550155600655565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b906006918254811015612b4b575b612b048354611576565b811015612b405760018101808211610d9057612b0491611079612b29612b3993610828565b50612b3383610828565b90612a1c565b9050612afa565b509050610290612a94565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e646578206f7574206f6620626f756e6400000000000000000000000000006044820152fdfea264697066735822122097277c62c3d9a2644926ca11b58793ce89e3cfe77333d890cbeac047b75be5f964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2311,
        "contract": "contracts/Testament.sol:Testament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2594,
        "contract": "contracts/Testament.sol:Testament",
        "label": "isAlive",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2596,
        "contract": "contracts/Testament.sol:Testament",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2599,
        "contract": "contracts/Testament.sol:Testament",
        "label": "timeInterval",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2602,
        "contract": "contracts/Testament.sol:Testament",
        "label": "inheritableTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2606,
        "contract": "contracts/Testament.sol:Testament",
        "label": "shares",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2608,
        "contract": "contracts/Testament.sol:Testament",
        "label": "totalShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2612,
        "contract": "contracts/Testament.sol:Testament",
        "label": "heirs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Heir)2591_storage)dyn_storage"
      },
      {
        "astId": 2614,
        "contract": "contracts/Testament.sol:Testament",
        "label": "functionsRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2617,
        "contract": "contracts/Testament.sol:Testament",
        "label": "source",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2619,
        "contract": "contracts/Testament.sol:Testament",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 2621,
        "contract": "contracts/Testament.sol:Testament",
        "label": "gasLimit",
        "offset": 8,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 2623,
        "contract": "contracts/Testament.sol:Testament",
        "label": "donID",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 2625,
        "contract": "contracts/Testament.sol:Testament",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 2627,
        "contract": "contracts/Testament.sol:Testament",
        "label": "lastResponse",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2629,
        "contract": "contracts/Testament.sol:Testament",
        "label": "lastError",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Heir)2591_storage)dyn_storage": {
        "base": "t_struct(Heir)2591_storage",
        "encoding": "dynamic_array",
        "label": "struct Testament.Heir[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Heir)2591_storage": {
        "encoding": "inplace",
        "label": "struct Testament.Heir",
        "members": [
          {
            "astId": 2588,
            "contract": "contracts/Testament.sol:Testament",
            "label": "heir",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2590,
            "contract": "contracts/Testament.sol:Testament",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}