{
  "address": "0x288BdC7BAE484D6018B9d151407f3813f1eBB205",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_identity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_inheritableTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_functionsRouter",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_donID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSharesInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedRequest",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_heirs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        }
      ],
      "name": "addHeirForERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_heir",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "addHeirForERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "erc20Heirs",
      "outputs": [
        {
          "internalType": "address",
          "name": "heir",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "erc721Heirs",
      "outputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "heir",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "erc721Inheritances",
      "outputs": [
        {
          "internalType": "address",
          "name": "heir",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "functionsRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getHeirForERC20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getHeirForERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNftForERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getShareForERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdForERC721",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inheritableTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastError",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResponse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeERC20HeirIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeERC721HeirIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_heirs",
          "type": "address[]"
        }
      ],
      "name": "removeHeirForERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeHeirForERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heir",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "source",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4dd29ed1ec00c72a89a5cdb7f540dc134ca0ce5298441cffef12dd5d6ab7b569",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0x288BdC7BAE484D6018B9d151407f3813f1eBB205",
    "transactionIndex": 0,
    "gasUsed": "3440014",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000000000000000020000000000000000004800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000004000000000000000000020000100000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1450cf76edd174c8a03c18e78c5aa5d9f45c957080185424f2f98cde03f30127",
    "transactionHash": "0x4dd29ed1ec00c72a89a5cdb7f540dc134ca0ce5298441cffef12dd5d6ab7b569",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4901948,
        "transactionHash": "0x4dd29ed1ec00c72a89a5cdb7f540dc134ca0ce5298441cffef12dd5d6ab7b569",
        "address": "0x288BdC7BAE484D6018B9d151407f3813f1eBB205",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1450cf76edd174c8a03c18e78c5aa5d9f45c957080185424f2f98cde03f30127"
      }
    ],
    "blockNumber": 4901948,
    "cumulativeGasUsed": "3440014",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "777",
    [
      "0xeA2Df57F2020F05AC7D0618C01192558A44b1995"
    ],
    "0xb83E47C2bC239B3bf370bc41e1459A34b41238D0",
    "1863",
    "300000",
    "0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "897a9f57b9b8ee0da70be31c2124b833",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_identity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_inheritableTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_functionsRouter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSharesInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedRequest\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_heirs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"addHeirForERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_heir\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"addHeirForERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc20Heirs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"heir\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc721Heirs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"heir\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721Inheritances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"heir\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionsRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHeirForERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHeirForERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNftForERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getShareForERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenIdForERC721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inheritableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastError\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResponse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeERC20HeirIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeERC721HeirIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_heirs\",\"type\":\"address[]\"}],\"name\":\"removeHeirForERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeHeirForERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heir\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Testament.sol\":\"Testament\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Testament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\r\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\r\\n\\r\\nerror InvalidArrayLength();\\r\\nerror InvalidSharesInput();\\r\\nerror UnexpectedRequest();\\r\\nerror InvalidTokenId();\\r\\n\\r\\ncontract Testament is Ownable, AutomationCompatibleInterface, FunctionsClient {\\r\\n    using FunctionsRequest for FunctionsRequest.Request;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct ERC20Heir {\\r\\n        address heir;\\r\\n        uint256 share;\\r\\n    }\\r\\n\\r\\n    struct ERC721Heir {\\r\\n        address nft;\\r\\n        uint256 tokenId;\\r\\n        address heir;\\r\\n    }\\r\\n\\r\\n    uint256 public immutable identity;\\r\\n\\r\\n    bool public isAlive = true;\\r\\n\\r\\n    uint256 public latestTimestamp;\\r\\n    uint256 public timeInterval = 2 minutes;\\r\\n\\r\\n    address[] public inheritableTokens;\\r\\n\\r\\n    mapping(address heir => uint256 share) public shares;\\r\\n    uint256 public totalShares;\\r\\n    ERC20Heir[] public erc20Heirs;\\r\\n\\r\\n    mapping(address nft => mapping(uint256 tokenId => address heir))\\r\\n        public erc721Inheritances;\\r\\n    ERC721Heir[] public erc721Heirs;\\r\\n\\r\\n    address public functionsRouter;\\r\\n    string public source =\\r\\n        \\\"const requestCounter = args[1];\\\"\\r\\n        \\\"let isAlive = '1';\\\"\\r\\n        \\\"if (requestCounter == '2') {\\\"\\r\\n        \\\"isAlive = '0';\\\"\\r\\n        \\\"}\\\"\\r\\n        \\\"return Functions.encodeString(isAlive);\\\";\\r\\n\\r\\n    uint64 public subscriptionId;\\r\\n    uint32 public gasLimit;\\r\\n    bytes32 public donID;\\r\\n\\r\\n    uint256 public requestCounter;\\r\\n\\r\\n    bytes32 public lastRequestId;\\r\\n    string public lastResponse;\\r\\n    string public lastError;\\r\\n\\r\\n    constructor(\\r\\n        uint256 _identity,\\r\\n        address[] memory _inheritableTokens,\\r\\n        address _functionsRouter,\\r\\n        uint64 _subscriptionId,\\r\\n        uint32 _gasLimit,\\r\\n        bytes32 _donID\\r\\n    ) Ownable(msg.sender) FunctionsClient(_functionsRouter) {\\r\\n        identity = _identity;\\r\\n        inheritableTokens = _inheritableTokens;\\r\\n        functionsRouter = _functionsRouter;\\r\\n        subscriptionId = _subscriptionId;\\r\\n        gasLimit = _gasLimit;\\r\\n        donID = _donID;\\r\\n        latestTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function addHeirForERC20(\\r\\n        address[] memory _heirs,\\r\\n        uint256[] memory _shares\\r\\n    ) public onlyOwner {\\r\\n        if (_heirs.length != _shares.length) {\\r\\n            revert InvalidArrayLength();\\r\\n        }\\r\\n        uint256 _totalShares = totalShares;\\r\\n        for (uint256 i; i < _heirs.length; i++) {\\r\\n            if (_totalShares - shares[_heirs[i]] + _shares[i] > 100) {\\r\\n                revert InvalidSharesInput();\\r\\n            } else {\\r\\n                totalShares = _shares[i] - shares[_heirs[i]];\\r\\n            }\\r\\n        }\\r\\n        for (uint256 i; i < _heirs.length; i++) {\\r\\n            shares[_heirs[i]] = _shares[i];\\r\\n            bool _isExisted = false;\\r\\n            for (uint256 j; j < erc20Heirs.length; j++) {\\r\\n                if (erc20Heirs[j].heir == _heirs[i]) {\\r\\n                    erc20Heirs[j] = ERC20Heir(_heirs[i], _shares[i]);\\r\\n                    _isExisted = true;\\r\\n                }\\r\\n            }\\r\\n            if (!_isExisted) {\\r\\n                erc20Heirs.push(ERC20Heir(_heirs[i], _shares[i]));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeHeirForERC20(address[] memory _heirs) public onlyOwner {\\r\\n        for (uint256 i; i < _heirs.length; i++) {\\r\\n            delete shares[_heirs[i]];\\r\\n            totalShares -= shares[_heirs[i]];\\r\\n            uint256[] memory _indexesToRemove = new uint256[](_heirs.length);\\r\\n            for (uint256 j; j < erc20Heirs.length; j++) {\\r\\n                if (erc20Heirs[j].heir == _heirs[i]) {\\r\\n                    _indexesToRemove[i] = j;\\r\\n                }\\r\\n            }\\r\\n            for (uint256 k; k < _indexesToRemove.length; k++) {\\r\\n                removeERC20HeirIndex(_indexesToRemove[k]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addHeirForERC721(\\r\\n        address _heir,\\r\\n        address _nft,\\r\\n        uint256 _tokenId\\r\\n    ) public onlyOwner {\\r\\n        IERC721 _nftContract = IERC721(_nft);\\r\\n        if (_nftContract.ownerOf(_tokenId) != msg.sender) {\\r\\n            revert InvalidTokenId();\\r\\n        }\\r\\n        if (erc721Inheritances[_nft][_tokenId] != _heir) {\\r\\n            erc721Inheritances[_nft][_tokenId] = _heir;\\r\\n            erc721Heirs.push(ERC721Heir(_nft, _tokenId, _heir));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeHeirForERC721(\\r\\n        address _nft,\\r\\n        uint256 _tokenId\\r\\n    ) public onlyOwner {\\r\\n        delete erc721Inheritances[_nft][_tokenId];\\r\\n        for (uint256 i; i < erc721Heirs.length; i++) {\\r\\n            if (erc721Heirs[i].nft == _nft) {\\r\\n                if (erc721Heirs[i].tokenId == _tokenId) {\\r\\n                    removeERC721HeirIndex(i);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function requestData() public {\\r\\n        FunctionsRequest.Request memory req;\\r\\n        req.initializeRequestForInlineJavaScript(source);\\r\\n        string[] memory args = new string[](2);\\r\\n        args[0] = Strings.toString(identity);\\r\\n        args[1] = Strings.toString(requestCounter);\\r\\n        if (args.length > 0) req.setArgs(args);\\r\\n        lastRequestId = _sendRequest(\\r\\n            req.encodeCBOR(),\\r\\n            subscriptionId,\\r\\n            gasLimit,\\r\\n            donID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillRequest(\\r\\n        bytes32 _requestId,\\r\\n        bytes memory _response,\\r\\n        bytes memory _err\\r\\n    ) internal override {\\r\\n        if (lastRequestId != _requestId) {\\r\\n            revert UnexpectedRequest();\\r\\n        }\\r\\n        lastResponse = string(_response);\\r\\n        lastError = string(_err);\\r\\n        if (keccak256(_response) == keccak256(bytes(\\\"0\\\"))) {\\r\\n            for (uint256 i; i < inheritableTokens.length; i++) {\\r\\n                IERC20 _token = IERC20(inheritableTokens[i]);\\r\\n                uint256 _balance = _token.balanceOf(owner());\\r\\n                for (uint256 j; j < erc20Heirs.length; j++) {\\r\\n                    _token.transferFrom(\\r\\n                        owner(),\\r\\n                        erc20Heirs[j].heir,\\r\\n                        ((_balance * erc20Heirs[j].share) / 100)\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            for (uint256 i; i < erc721Heirs.length; i++) {\\r\\n                IERC721 _nft = IERC721(erc721Heirs[i].nft);\\r\\n                address _heir = erc721Heirs[i].heir;\\r\\n                uint256 _id = erc721Heirs[i].tokenId;\\r\\n                _nft.transferFrom(owner(), _heir, _id);\\r\\n            }\\r\\n            isAlive = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        upkeepNeeded =\\r\\n            (isAlive) &&\\r\\n            (block.timestamp - latestTimestamp >= timeInterval);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        requestCounter++;\\r\\n        latestTimestamp = block.timestamp;\\r\\n        requestData();\\r\\n    }\\r\\n\\r\\n    function removeERC20HeirIndex(uint _index) public {\\r\\n        require(_index < erc20Heirs.length, \\\"index out of bound\\\");\\r\\n\\r\\n        for (uint i = _index; i < erc20Heirs.length - 1; i++) {\\r\\n            erc20Heirs[i] = erc20Heirs[i + 1];\\r\\n        }\\r\\n        erc20Heirs.pop();\\r\\n    }\\r\\n\\r\\n    function removeERC721HeirIndex(uint _index) public {\\r\\n        require(_index < erc721Heirs.length, \\\"index out of bound\\\");\\r\\n\\r\\n        for (uint i = _index; i < erc721Heirs.length - 1; i++) {\\r\\n            erc721Heirs[i] = erc721Heirs[i + 1];\\r\\n        }\\r\\n        erc721Heirs.pop();\\r\\n    }\\r\\n\\r\\n    function getHeirForERC20(uint256 _index) public view returns (address) {\\r\\n        return erc20Heirs[_index].heir;\\r\\n    }\\r\\n\\r\\n    function getShareForERC20(uint256 _index) public view returns (uint256) {\\r\\n        return erc20Heirs[_index].share;\\r\\n    }\\r\\n\\r\\n    function getHeirForERC721(uint256 _index) public view returns (address) {\\r\\n        return erc721Heirs[_index].heir;\\r\\n    }\\r\\n\\r\\n    function getNftForERC721(uint256 _index) public view returns (address) {\\r\\n        return erc721Heirs[_index].nft;\\r\\n    }\\r\\n\\r\\n    function getTokenIdForERC721(uint256 _index) public view returns (uint256) {\\r\\n        return erc721Heirs[_index].tokenId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80386b5c11bff529666e385561d3775b29de56ef93f6042f27baa973818c6ca0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234620003695762003b78803803806200001d816200039f565b92833981019060c08183031262000369578051602080830151919290916001600160401b03908181116200036957820185601f82011215620003695780519582871162000389578660051b9185620000778185016200039f565b809981520190868294820101928311620003695786809101915b8383106200036e5750505050620000ab60408401620003c5565b91606084015192818416809403620003695760808501519463ffffffff86168603620003695760a0015195331562000350576000908154946040519a60018060a01b03809533828a167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08880a31660808190526001600160a81b03199097163360ff60a01b191617600160a01b1784556078600255600a5460019b90808d1c908d16801562000345575b858210146200033157601f81116200030c575b50610107600a55600a85526265293b60e81b60048d7f6574206973416c697665203d202731273b6966202872657175657374436f756e878920917f636f6e73742072657175657374436f756e746572203d20617267735b315d3b6c83558201557f746572203d3d2027322729207b6973416c697665203d202730273b7d7265747560028201557f726e2046756e6374696f6e732e656e636f6465537472696e67286973416c69766003820155015560a05251948511620002f857680100000000000000008511620002f85760035485600355808610620002da575b50926003835289828420935b868110620002c5575050505050505060018060a01b031960095416176009556bffffffff0000000000000000600b549260401b169160018060601b0319161717600b55600c554290556137849081620003f482396080518181816104630152612057015260a051818181610e800152611f260152f35b838387511696019581860155018a906200024f565b60038452828420620002f1918101908701620003da565b3862000243565b634e487b7160e01b83526041600452602483fd5b6200032a90600a87526005601f8789209201811c82019101620003da565b3862000168565b634e487b7160e01b86526022600452602486fd5b90607f169062000155565b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b81906200037b84620003c5565b815201910190869062000091565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200038957604052565b51906001600160a01b03821682036200036957565b818110620003e6575050565b60008155600101620003da56fe6080604052600436101561001257600080fd5b60003560e01c8063089d84c81461026757806309c1ba2e146102625780630ca761751461025d5780630d468870146102585780630f64abed1461025357806319c20c071461024e57806329f0de3f146102495780632c159a1a146102445780632f72bb611461023f5780633a98ef391461023a5780634136aa35146102355780634585e33b14610230578063479ab63e1461022b578063509d08b014610226578063606deecd1461022157806362747e421461021c57806367e828bf146102175780636d0a5580146102125780636e04ff0d1461020d5780636e74336b14610208578063715018a6146102035780638205bf6a146101fe57806385b1c72d146101f95780638da5cb5b146101f45780638eff4cde146101ef5780638f516438146101ea57806392afbc6f146101e5578063973a814e146101e0578063ce7c2ac2146101db578063d58f05da146101d6578063d7f5d5a1146101d1578063ed59ef08146101cc578063f2fde38b146101c7578063f68016b7146101c2578063f94161b4146101bd578063fc2a88c3146101b85763fcfbe8ab146101b357600080fd5b61193a565b61191c565b6118b9565b611857565b61178f565b611735565b6116f4565b6116c0565b611675565b611657565b611624565b611606565b61159f565b611534565b61145f565b611441565b6113c2565b6113a4565b611335565b611315565b6112e5565b61123e565b611225565b611209565b6111b6565b61111e565b6110ae565b611090565b610f23565b610e68565b610d65565b610971565b610928565b6108ea565b6103fb565b610295565b3461028557602060031936011261028557610283600435613553565b005b600080fd5b600091031261028557565b3461028557600060031936011261028557602067ffffffffffffffff600b5416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161030057604052565b6102bd565b60e0810190811067ffffffffffffffff82111761030057604052565b6040810190811067ffffffffffffffff82111761030057604052565b6060810190811067ffffffffffffffff82111761030057604052565b90601f601f19910116810190811067ffffffffffffffff82111761030057604052565b604051906103898261033d565b565b6040519061038982610321565b67ffffffffffffffff811161030057601f01601f191660200190565b81601f82011215610285578035906103cb82610398565b926103d96040519485610359565b8284526020838301011161028557816000926020809301838601378301015290565b3461028557606060031936011261028557600480359067ffffffffffffffff906024358281116102855761043290369083016103b4565b916044359081116102855761044a90369083016103b4565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001633036108c15784600e5403610898576104a49061049f8561326e565b613357565b82516020809401206104b4613440565b848151910120146104e8575b837f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b92916000935b60035485101561073c576105ba9061054761052e61052e61050e89611568565b905473ffffffffffffffffffffffffffffffffffffffff9160031b1c1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9061056760005473ffffffffffffffffffffffffffffffffffffffff1690565b95846040978851809681927f70a082310000000000000000000000000000000000000000000000000000000083528a830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381865afa9384156106ef5760009461070d575b5060005b6006548110156106f45760005473ffffffffffffffffffffffffffffffffffffffff16908661061e61060383611177565b505473ffffffffffffffffffffffffffffffffffffffff1690565b92896106a061064461063d600161063488611177565b5001548c612678565b6064900490565b8d5196879485947f23b872dd000000000000000000000000000000000000000000000000000000008652850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03816000895af19182156106ef576106bd926106c2575b50611c6b565b6105d2565b6106e190883d8a116106e8575b6106d98183610359565b810190613479565b50386106b7565b503d6106cf565b611dc3565b509691509294506107059150611c6b565b9392906104ee565b61072e919450853d8711610735575b6107268183610359565b810190611fc1565b92386105ce565b503d61071c565b93505060005b60085481101561085f5761075b61052e6106038361187e565b90610786600261076a8361187e565b50015473ffffffffffffffffffffffffffffffffffffffff1690565b918560016107938461187e565b5001549116906107b860005473ffffffffffffffffffffffffffffffffffffffff1690565b91803b15610285576108289460008094604051978895869485937f23b872dd0000000000000000000000000000000000000000000000000000000085528c850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af19182156106ef57610841926108465750611c6b565b610742565b80610853610859926102ec565b8061028a565b386106b7565b505090506108907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60005416600055565b3880806104c0565b826040517f290274c9000000000000000000000000000000000000000000000000000000008152fd5b826040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b3461028557602060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff61091d60043561187e565b505416604051908152f35b346102855760206003193601126102855760206001610948600435611177565b500154604051908152f35b73ffffffffffffffffffffffffffffffffffffffff81160361028557565b346102855760606003193601126102855760043561098e81610953565b60243561099a81610953565b6044356109a56119dd565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff906020816024818786165afa9081156106ef57600091610b64575b508133911603610b3a57610a66610a4c83610a3d8673ffffffffffffffffffffffffffffffffffffffff166000526007602052604060002090565b90600052602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b848216911603610a7257005b8281610aec61028395610aac610b3595610a3d8873ffffffffffffffffffffffffffffffffffffffff166000526007602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b610b13610af761037c565b73ffffffffffffffffffffffffffffffffffffffff9095168552565b602084015273ffffffffffffffffffffffffffffffffffffffff166040830152565b611dcf565b60046040517f3f6cc768000000000000000000000000000000000000000000000000000000008152fd5b610b85915060203d8111610b8b575b610b7d8183610359565b810190611dae565b38610a02565b503d610b73565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b90600182811c92168015610c0a575b6020831014610bdb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610bd0565b60405190600082600a5491610c2883610bc1565b80835292600190818116908115610cae5750600114610c4f575b5061038992500383610359565b600a600090815291507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b848310610c935750610389935050810160200138610c42565b81935090816020925483858a01015201910190918592610c7a565b602093506103899592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138610c42565b60005b828110610d0057506000910152565b608081015182820152602001610cf1565b919082519283825260005b848110610d3d575050601f19601f8460006020809697860101520116010190565b602081830181015184830182015201610d1c565b906020610d62928181520190610d11565b90565b3461028557600080600319360112610e65576040519080601054610d8881610bc1565b80855291600191808316908115610e1d5750600114610dc2575b610dbe85610db281870382610359565b60405191829182610d51565b0390f35b9250601083527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6725b828410610e05575050508101602001610db282610dbe610da2565b80546020858701810191909152909301928101610dea565b869550610dbe96935060209250610db29491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610da2565b80fd5b346102855760006003193601126102855760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b67ffffffffffffffff81116103005760051b60200190565b81601f8201121561028557803591610ed283610ea3565b92610ee06040519485610359565b808452602092838086019260051b820101928311610285578301905b828210610f0a575050505090565b8380918335610f1881610953565b815201910190610efc565b346102855760206003193601126102855760043567ffffffffffffffff811161028557610f54903690600401610ebb565b610f5c6119dd565b60005b8151811015610283576000610fba610f94610f7a8486611c97565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166000526004602052604060002090565b55610fdf610fda610fd1610f94610f7a8587611c97565b54600554611cba565b600555565b610fe98251611d7d565b600654909260005b8281106110395750905060005b8351811015611028578061101e6110186110239387611c97565b51613553565b611c6b565b610ffe565b50915061103490611c6b565b610f5f565b8061104961060361107a93611177565b73ffffffffffffffffffffffffffffffffffffffff61106e61052e610f7a8988611c97565b91161461107f57611c6b565b610ff1565b8061108a8688611c97565b52611c6b565b34610285576000600319360112610285576020600554604051908152f35b3461028557600060031936011261028557602060ff60005460a01c166040519015158152f35b9060206003198301126102855760043567ffffffffffffffff9283821161028557806023830112156102855781600401359384116102855760248483010111610285576024019190565b346102855761112c366110d4565b5050611139600d54611c6b565b600d5542600155610283611ec6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6006548110156111b157600660005260011b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b611148565b3461028557602060031936011261028557600435600654811015610285576111df604091611177565b50600173ffffffffffffffffffffffffffffffffffffffff82541691015482519182526020820152f35b3461028557602060031936011261028557610283600435613643565b3461028557600060031936011261028557610283611ec6565b3461028557600080600319360112610e65576040519080600f5461126181610bc1565b80855291600191808316908115610e1d575060011461128a57610dbe85610db281870382610359565b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8284106112cd575050508101602001610db282610dbe610da2565b805460208587018101919091529093019281016112b2565b3461028557600060031936011261028557610dbe611301610c14565b604051918291602083526020830190610d11565b34610285576020600319360112610285576020600161094860043561187e565b3461028557611343366110d4565b505060ff60005460a01c1680611388575b604051901515815260406020820152606081601f19601f835180604085015261137f81868601610cee565b01168101030190f35b50600154420342811161139f576002541115611354565b611c3c565b34610285576000600319360112610285576020600c54604051908152f35b3461028557600080600319360112610e65576113dc6119dd565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b34610285576000600319360112610285576020600154604051908152f35b346102855760406003193601126102855760043561147c81610953565b602435906114886119dd565b73ffffffffffffffffffffffffffffffffffffffff809116916000928084526007602052604084208285526020526114e5604085207fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b835b6008548110156115305780828561150361060361150e9561187e565b161461151357611c6b565b6114e7565b83600161151f8361187e565b50015403611c6b5761101e81613643565b8480f35b3461028557600060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6003548110156111b15760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b34610285576020600319360112610285576004356003548110156102855773ffffffffffffffffffffffffffffffffffffffff60209160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b015416604051908152f35b34610285576000600319360112610285576020600254604051908152f35b3461028557602060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff61091d600435611177565b34610285576000600319360112610285576020600d54604051908152f35b346102855760206003193601126102855773ffffffffffffffffffffffffffffffffffffffff6004356116a781610953565b1660005260046020526020604060002054604051908152f35b3461028557600060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff60095416604051908152f35b3461028557602060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff600261172960043561187e565b50015416604051908152f35b3461028557604060031936011261028557602060043561175481610953565b73ffffffffffffffffffffffffffffffffffffffff809116600052600782526040600020602435600052825260406000205416604051908152f35b34610285576020600319360112610285576004356117ac81610953565b6117b46119dd565b73ffffffffffffffffffffffffffffffffffffffff8091168015611826576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b34610285576000600319360112610285576020600b5463ffffffff6040519160401c168152f35b6008548110156111b1576003906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b3461028557602060031936011261028557600435600854811015610285576118e260609161187e565b5073ffffffffffffffffffffffffffffffffffffffff90818154169160026001830154920154169060405192835260208301526040820152f35b34610285576000600319360112610285576020600e54604051908152f35b346102855760406003193601126102855767ffffffffffffffff6004358181116102855761196c903690600401610ebb565b90602435908111610285573660238201121561028557806004013561199081610ea3565b9161199e6040519384610359565b81835260209160248385019160051b8301019136831161028557602401905b8282106119ce576102838587611a2e565b813581529083019083016119bd565b73ffffffffffffffffffffffffffffffffffffffff6000541633036119fe57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b919091611a396119dd565b8051835103611c125760055460005b8251811015611ae2576064611a81611a70611a69610f94610f7a8689611c97565b5485611cba565b611a7a8489611c97565b5190611cd5565b1115611ab15760046040517f3e996863000000000000000000000000000000000000000000000000000000008152fd5b8061101e610fda611ac5611add9489611c97565b51611ad6610f94610f7a868a611c97565b5490611cba565b611a48565b505090916000905b8251821015611c0d57611afd8282611c97565b51611b0e610f94610f7a8587611c97565b55600093845b600654811015611bc557611b2a61060382611177565b73ffffffffffffffffffffffffffffffffffffffff611b4f61052e610f7a888a611c97565b911614611b65575b611b6090611c6b565b611b14565b9450611bbd611b77610f7a8587611c97565b611b818585611c97565b51611ba9611b8d61038b565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b6020820152611bb787611177565b90611ce2565b600194611b57565b5091611bd6919415611bdd57611c6b565b9092611aea565b61101e611bed610f7a8387611c97565b611bf78388611c97565b51611c03611b8d61038b565b6020820152611d55565b505050565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600019811461139f5760010190565b8051156111b15760200190565b8051600110156111b15760400190565b80518210156111b15760209160051b010190565b90601f19820191821161139f57565b9190820391821161139f57565b906020820180921161139f57565b9190820180921161139f57565b9190611d5057602081611d4973ffffffffffffffffffffffffffffffffffffffff6001945116859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b0151910155565b610b92565b600654906801000000000000000082101561030057611bb78260016103899401600655611177565b90611d8782610ea3565b611d946040519182610359565b828152601f19611da48294610ea3565b0190602036910137565b908160209103126102855751610d6281610953565b6040513d6000823e3d90fd5b6008546801000000000000000081101561030057806001611df3920160085561187e565b611d5057815181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617825561038992600291906040906020810151600186015501511691019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b604090815191611ea18361033d565b600283528260005b828110611eb557505050565b806060602080938501015201611ea9565b610389611fac611f8a604051611edb81610305565b60008152600060208201526000604082015260608082015260606080820152606060a0820152606060c0820152611f19611f13610c14565b8261248d565b611f21611e92565b611f4a7f000000000000000000000000000000000000000000000000000000000000000061303c565b611f5382611c7a565b52611f5d81611c7a565b50611f69600d5461303c565b611f7282611c87565b52611f7c81611c87565b508051611fb1575b506122a7565b600b54600c549167ffffffffffffffff63ffffffff8360401c16921690611fd0565b600e55565b611fbb90826124ce565b38611f84565b90816020910312610285575190565b929060209267ffffffffffffffff9263ffffffff61202960405197889687967f461d276200000000000000000000000000000000000000000000000000000000885216600487015260a0602487015260a4860190610d11565b926001604486015216606484015260848301520381600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156106ef576000916120b2575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b6120ca915060203d8111610735576107268183610359565b38612088565b604051906120dd82610321565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003111561214257565b612109565b6040519061215482610321565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b6001111561214257565b6040519061219782610321565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b604051906121d082610321565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b6040519061220982610321565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b6040519061224282610321565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b6040519061227b82610321565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b6122af61251f565b906122c16122bb6120d0565b83612c67565b6122de81516122cf81612138565b6122d881612138565b836125c1565b6122e96122bb612147565b61230360408201516122fa81612180565b6122d881612180565b61230e6122bb61218a565b61231c606082015183612c67565b60a08101805151612434575b50608081019081515161239c575b60c0915001805151612349575b50515190565b916123556122bb61226e565b61235e82612cec565b60005b83518051821015612389579061101e61237d8261238494611c97565b5185612bb1565b612361565b5050915061239681612d78565b38612343565b6020810180516123ab81612138565b6123b481612138565b1561240a5760c0926123ed612405926123d46123ce6121fc565b88612c67565b516123de81612138565b6123e781612138565b866125c1565b6123fe6123f8612235565b86612c67565b5184612bb1565b612336565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b926124466124406121c3565b84612c67565b61244f83612cec565b60005b8451805182101561247a579061101e61246e8261247594611c97565b5186612c67565b612452565b5050925061248782612d78565b38612328565b8151156124a4576000808252604082015260600152565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b8151156124db5760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b6040519061251282610321565b6000602083606081520152565b60405161252b81610321565b612533612505565b8082526020820160008152612546612505565b506101006020830152604051809252600082526101208201918210610285576000916040525290565b90612578612505565b50601f8116806125a7575b50806020830152604051908183526000825281016020019081106102855760405290565b6020036020811161139f57810180911161139f5738612583565b908151916125cd612505565b50825151600181019081811161139f576020850151811015612626575b60c26020610389965192830101538051821161261e575b50506040519160208301526020825261261982610321565b612bb1565b523880612601565b8160011b948286046002148315171561139f576020816126586103899861265160c29551918461256f565b5082612af5565b50965050506125ea565b908160011b918083046002149015171561139f57565b8181029291811591840414171561139f57565b612693612505565b50805151600181019081811161139f5760208301518110156126cc575b605b602084519283010153805182116126c857505090565b5290565b8160011b8281046002148315171561139f576126f5906126ee8551918661256f565b5084612af5565b506126b0565b612703612505565b50805151600181019081811161139f576020830151811015612738575b605a602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f5761275a906126ee8551918661256f565b50612720565b612768612505565b50805151600181019081811161139f57602083015181101561279d575b6059602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f576127bf906126ee8551918661256f565b50612785565b6127cd612505565b50805151600181019081811161139f576020830151811015612802575b6058602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f57612824906126ee8551918661256f565b506127ea565b612832612505565b50805151600181019081811161139f576020830151811015612867575b607b602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f57612889906126ee8551918661256f565b5061284f565b612897612505565b50805151600181019081811161139f5760208301518110156128cc575b607a602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f576128ee906126ee8551918661256f565b506128b4565b6128fc612505565b50805151600181019081811161139f576020830151811015612931575b6079602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f57612953906126ee8551918661256f565b50612919565b612961612505565b50805151600181019081811161139f576020830151811015612996575b6078602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f576129b8906126ee8551918661256f565b5061297e565b906129c7612505565b50815151600181019182821161139f5760208401518210156129fa575b602084519283010153805182116126c857505090565b8260011b8381046002148415171561139f57612a2390612a1c8651918761256f565b5085612af5565b506129e4565b90612a368251918361256f565b50612a3f612505565b508051612a4a612505565b50612a588251821115612baa565b82515192612a668285611cd5565b926020938285809401518211612ade575b5183815197820101968211612ad6575b505001915b80821015612aae579060001991036101000a0190811990511690825116179052565b909192612aca612ac4612ad09286518152611cc7565b94611cc7565b92611cab565b90612a8c565b523880612a87565b612af0612aea83612662565b82612a29565b612a77565b90612afe612505565b50805190612b0a612505565b50612b188151831115612baa565b82515191612b268184611cd5565b6020928391828701518111612b93575b865183815197820101968211612b8b575b505001915b80821015612b6f579060001991036101000a019081199051169082511617905290565b909192612aca612ac4612b859286518152611cc7565b90612b4c565b523880612b47565b612ba5612b9f82612662565b88612a29565b612b36565b1561028557565b8151612be992919067ffffffffffffffff81169060178211612bec57612be19150604060ff8451921617906129be565b505b51612af5565b50565b5060ff8111612c1157612c0b90612c0383516127c5565b508251612f91565b50612be3565b61ffff8111612c3057612c0b90612c288351612760565b508251612f0d565b63ffffffff8111612c5157612c0b90612c4983516126fb565b508251612e89565b612c0b90612c5f835161268b565b508251612e05565b8151612be992919067ffffffffffffffff81169060178211612c9757612be19150606060ff8451921617906129be565b5060ff8111612cae57612c0b90612c038351612959565b61ffff8111612cc557612c0b90612c2883516128f4565b63ffffffff8111612cde57612c0b90612c49835161288f565b612c0b90612c5f835161282a565b805190612cf7612505565b50815151600181019081811161139f576020840151811015612d45575b609f6020809551928301015380518211612d3d575b5050018051906001820180921161139f5752565b523880612d29565b8160011b938285046002148315171561139f57602081612d6e8297612651609f9551918461256f565b5095505050612d14565b805190612d83612505565b50815151600181019081811161139f576020840151811015612dd2575b60ff6020809551928301015380518211612dca575b505001805190600019820191821161139f5752565b523880612db5565b8160011b938285046002148315171561139f57602081612dfb829761265160ff9551918461256f565b5095505050612da0565b90612e0e612505565b5081515180600801918260081161139f5760208401518311612e68575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000825116179052805182116126c857505090565b8260011b8381046002148415171561139f57612e849085612a29565b612e2b565b90612e92612505565b5081515180600401918260041161139f5760208401518311612eec575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825116179052805182116126c857505090565b8260011b8381046002148415171561139f57612f089085612a29565b612eaf565b90612f16612505565b5081515180600201918260021161139f5760208401518311612f70575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000825116179052805182116126c857505090565b8260011b8381046002148415171561139f57612f8c9085612a29565b612f33565b90612f9a612505565b5081515180600101918260011161139f5760208401518311612ff4575b6001845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825116179052805182116126c857505090565b8260011b8381046002148415171561139f576130109085612a29565b612fb7565b9061301f82610398565b61302c6040519182610359565b828152601f19611da48294610398565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561317e575b506d04ee2d6d415b85acef81000000008083101561316f575b50662386f26fc1000080831015613160575b506305f5e10080831015613151575b5061271080831015613142575b506064821015613132575b600a80921015613128575b6001908160216130d3828701613015565b95860101905b6130e5575b5050505090565b600019849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215613123579190826130d9565b6130de565b91600101916130c2565b91906064600291049101916130b7565b600491939204910191386130ac565b6008919392049101913861309f565b60109193920491019138613090565b6020919392049101913861307e565b604093508104915038613065565b601f8111613198575050565b600090600f82527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802906020601f850160051c830194106131f3575b601f0160051c01915b8281106131e857505050565b8181556001016131dc565b90925082906131d3565b601f8111613209575050565b600090601082527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672906020601f850160051c83019410613264575b601f0160051c01915b82811061325957505050565b81815560010161324d565b9092508290613244565b90815167ffffffffffffffff8111610300576132948161328f600f54610bc1565b61318c565b602080601f83116001146132cf57508192936000926132c4575b50506000198260011b9260031b1c191617600f55565b0151905038806132ae565b90601f19831694613302600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290565b926000905b87821061333f575050836001959610613326575b505050811b01600f55565b015160001960f88460031b161c1916905538808061331b565b80600185968294968601518155019501930190613307565b90815167ffffffffffffffff81116103005761337d81613378601054610bc1565b6131fd565b602080601f83116001146133b857508192936000926133ad575b50506000198260011b9260031b1c191617601055565b015190503880613397565b90601f198316946133eb60106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290565b926000905b87821061342857505083600195961061340f575b505050811b01601055565b015160001960f88460031b161c19169055388080613404565b806001859682949686015181550195019301906133f0565b6040519061344d82610321565b600182527f30000000000000000000000000000000000000000000000000000000000000006020830152565b90816020910312610285575180151581036102855790565b1561349857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e646578206f7574206f6620626f756e6400000000000000000000000000006044820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600654801561354e576000190161353b81611177565b611d505760018160008093550155600655565b6134f6565b9060069161356383548210613491565b8254600019810190811161139f578110156136095760019081810180821161139f5761358e90611177565b509161359982611177565b919091611d5057836135b49483036135b9575b505050611c6b565b613563565b805483547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161783558101549101553880806135ac565b509050610389613525565b600854801561354e576000190161362a8161187e565b611d505760028160008093558260018201550155600855565b9060089161365383548210613491565b8254600019810190811161139f578110156137435760019081810180821161139f5761367e9061187e565b50916136898261187e565b611d5057836136a09482036136a557505050611c6b565b613653565b805482547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617835561373b9380830154908401556002809201541691019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b3880806135ac565b50905061038961361456fea26469706673582212203b48eac9622416fd8dcd24b1280e1c7bcf1d1380b8f5c259da036d5b8fcecfda64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063089d84c81461026757806309c1ba2e146102625780630ca761751461025d5780630d468870146102585780630f64abed1461025357806319c20c071461024e57806329f0de3f146102495780632c159a1a146102445780632f72bb611461023f5780633a98ef391461023a5780634136aa35146102355780634585e33b14610230578063479ab63e1461022b578063509d08b014610226578063606deecd1461022157806362747e421461021c57806367e828bf146102175780636d0a5580146102125780636e04ff0d1461020d5780636e74336b14610208578063715018a6146102035780638205bf6a146101fe57806385b1c72d146101f95780638da5cb5b146101f45780638eff4cde146101ef5780638f516438146101ea57806392afbc6f146101e5578063973a814e146101e0578063ce7c2ac2146101db578063d58f05da146101d6578063d7f5d5a1146101d1578063ed59ef08146101cc578063f2fde38b146101c7578063f68016b7146101c2578063f94161b4146101bd578063fc2a88c3146101b85763fcfbe8ab146101b357600080fd5b61193a565b61191c565b6118b9565b611857565b61178f565b611735565b6116f4565b6116c0565b611675565b611657565b611624565b611606565b61159f565b611534565b61145f565b611441565b6113c2565b6113a4565b611335565b611315565b6112e5565b61123e565b611225565b611209565b6111b6565b61111e565b6110ae565b611090565b610f23565b610e68565b610d65565b610971565b610928565b6108ea565b6103fb565b610295565b3461028557602060031936011261028557610283600435613553565b005b600080fd5b600091031261028557565b3461028557600060031936011261028557602067ffffffffffffffff600b5416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161030057604052565b6102bd565b60e0810190811067ffffffffffffffff82111761030057604052565b6040810190811067ffffffffffffffff82111761030057604052565b6060810190811067ffffffffffffffff82111761030057604052565b90601f601f19910116810190811067ffffffffffffffff82111761030057604052565b604051906103898261033d565b565b6040519061038982610321565b67ffffffffffffffff811161030057601f01601f191660200190565b81601f82011215610285578035906103cb82610398565b926103d96040519485610359565b8284526020838301011161028557816000926020809301838601378301015290565b3461028557606060031936011261028557600480359067ffffffffffffffff906024358281116102855761043290369083016103b4565b916044359081116102855761044a90369083016103b4565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001633036108c15784600e5403610898576104a49061049f8561326e565b613357565b82516020809401206104b4613440565b848151910120146104e8575b837f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b92916000935b60035485101561073c576105ba9061054761052e61052e61050e89611568565b905473ffffffffffffffffffffffffffffffffffffffff9160031b1c1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9061056760005473ffffffffffffffffffffffffffffffffffffffff1690565b95846040978851809681927f70a082310000000000000000000000000000000000000000000000000000000083528a830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381865afa9384156106ef5760009461070d575b5060005b6006548110156106f45760005473ffffffffffffffffffffffffffffffffffffffff16908661061e61060383611177565b505473ffffffffffffffffffffffffffffffffffffffff1690565b92896106a061064461063d600161063488611177565b5001548c612678565b6064900490565b8d5196879485947f23b872dd000000000000000000000000000000000000000000000000000000008652850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03816000895af19182156106ef576106bd926106c2575b50611c6b565b6105d2565b6106e190883d8a116106e8575b6106d98183610359565b810190613479565b50386106b7565b503d6106cf565b611dc3565b509691509294506107059150611c6b565b9392906104ee565b61072e919450853d8711610735575b6107268183610359565b810190611fc1565b92386105ce565b503d61071c565b93505060005b60085481101561085f5761075b61052e6106038361187e565b90610786600261076a8361187e565b50015473ffffffffffffffffffffffffffffffffffffffff1690565b918560016107938461187e565b5001549116906107b860005473ffffffffffffffffffffffffffffffffffffffff1690565b91803b15610285576108289460008094604051978895869485937f23b872dd0000000000000000000000000000000000000000000000000000000085528c850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af19182156106ef57610841926108465750611c6b565b610742565b80610853610859926102ec565b8061028a565b386106b7565b505090506108907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60005416600055565b3880806104c0565b826040517f290274c9000000000000000000000000000000000000000000000000000000008152fd5b826040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b3461028557602060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff61091d60043561187e565b505416604051908152f35b346102855760206003193601126102855760206001610948600435611177565b500154604051908152f35b73ffffffffffffffffffffffffffffffffffffffff81160361028557565b346102855760606003193601126102855760043561098e81610953565b60243561099a81610953565b6044356109a56119dd565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff906020816024818786165afa9081156106ef57600091610b64575b508133911603610b3a57610a66610a4c83610a3d8673ffffffffffffffffffffffffffffffffffffffff166000526007602052604060002090565b90600052602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b848216911603610a7257005b8281610aec61028395610aac610b3595610a3d8873ffffffffffffffffffffffffffffffffffffffff166000526007602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b610b13610af761037c565b73ffffffffffffffffffffffffffffffffffffffff9095168552565b602084015273ffffffffffffffffffffffffffffffffffffffff166040830152565b611dcf565b60046040517f3f6cc768000000000000000000000000000000000000000000000000000000008152fd5b610b85915060203d8111610b8b575b610b7d8183610359565b810190611dae565b38610a02565b503d610b73565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b90600182811c92168015610c0a575b6020831014610bdb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610bd0565b60405190600082600a5491610c2883610bc1565b80835292600190818116908115610cae5750600114610c4f575b5061038992500383610359565b600a600090815291507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b848310610c935750610389935050810160200138610c42565b81935090816020925483858a01015201910190918592610c7a565b602093506103899592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138610c42565b60005b828110610d0057506000910152565b608081015182820152602001610cf1565b919082519283825260005b848110610d3d575050601f19601f8460006020809697860101520116010190565b602081830181015184830182015201610d1c565b906020610d62928181520190610d11565b90565b3461028557600080600319360112610e65576040519080601054610d8881610bc1565b80855291600191808316908115610e1d5750600114610dc2575b610dbe85610db281870382610359565b60405191829182610d51565b0390f35b9250601083527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6725b828410610e05575050508101602001610db282610dbe610da2565b80546020858701810191909152909301928101610dea565b869550610dbe96935060209250610db29491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610da2565b80fd5b346102855760006003193601126102855760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b67ffffffffffffffff81116103005760051b60200190565b81601f8201121561028557803591610ed283610ea3565b92610ee06040519485610359565b808452602092838086019260051b820101928311610285578301905b828210610f0a575050505090565b8380918335610f1881610953565b815201910190610efc565b346102855760206003193601126102855760043567ffffffffffffffff811161028557610f54903690600401610ebb565b610f5c6119dd565b60005b8151811015610283576000610fba610f94610f7a8486611c97565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166000526004602052604060002090565b55610fdf610fda610fd1610f94610f7a8587611c97565b54600554611cba565b600555565b610fe98251611d7d565b600654909260005b8281106110395750905060005b8351811015611028578061101e6110186110239387611c97565b51613553565b611c6b565b610ffe565b50915061103490611c6b565b610f5f565b8061104961060361107a93611177565b73ffffffffffffffffffffffffffffffffffffffff61106e61052e610f7a8988611c97565b91161461107f57611c6b565b610ff1565b8061108a8688611c97565b52611c6b565b34610285576000600319360112610285576020600554604051908152f35b3461028557600060031936011261028557602060ff60005460a01c166040519015158152f35b9060206003198301126102855760043567ffffffffffffffff9283821161028557806023830112156102855781600401359384116102855760248483010111610285576024019190565b346102855761112c366110d4565b5050611139600d54611c6b565b600d5542600155610283611ec6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6006548110156111b157600660005260011b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b611148565b3461028557602060031936011261028557600435600654811015610285576111df604091611177565b50600173ffffffffffffffffffffffffffffffffffffffff82541691015482519182526020820152f35b3461028557602060031936011261028557610283600435613643565b3461028557600060031936011261028557610283611ec6565b3461028557600080600319360112610e65576040519080600f5461126181610bc1565b80855291600191808316908115610e1d575060011461128a57610dbe85610db281870382610359565b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8284106112cd575050508101602001610db282610dbe610da2565b805460208587018101919091529093019281016112b2565b3461028557600060031936011261028557610dbe611301610c14565b604051918291602083526020830190610d11565b34610285576020600319360112610285576020600161094860043561187e565b3461028557611343366110d4565b505060ff60005460a01c1680611388575b604051901515815260406020820152606081601f19601f835180604085015261137f81868601610cee565b01168101030190f35b50600154420342811161139f576002541115611354565b611c3c565b34610285576000600319360112610285576020600c54604051908152f35b3461028557600080600319360112610e65576113dc6119dd565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b34610285576000600319360112610285576020600154604051908152f35b346102855760406003193601126102855760043561147c81610953565b602435906114886119dd565b73ffffffffffffffffffffffffffffffffffffffff809116916000928084526007602052604084208285526020526114e5604085207fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b835b6008548110156115305780828561150361060361150e9561187e565b161461151357611c6b565b6114e7565b83600161151f8361187e565b50015403611c6b5761101e81613643565b8480f35b3461028557600060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6003548110156111b15760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b34610285576020600319360112610285576004356003548110156102855773ffffffffffffffffffffffffffffffffffffffff60209160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b015416604051908152f35b34610285576000600319360112610285576020600254604051908152f35b3461028557602060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff61091d600435611177565b34610285576000600319360112610285576020600d54604051908152f35b346102855760206003193601126102855773ffffffffffffffffffffffffffffffffffffffff6004356116a781610953565b1660005260046020526020604060002054604051908152f35b3461028557600060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff60095416604051908152f35b3461028557602060031936011261028557602073ffffffffffffffffffffffffffffffffffffffff600261172960043561187e565b50015416604051908152f35b3461028557604060031936011261028557602060043561175481610953565b73ffffffffffffffffffffffffffffffffffffffff809116600052600782526040600020602435600052825260406000205416604051908152f35b34610285576020600319360112610285576004356117ac81610953565b6117b46119dd565b73ffffffffffffffffffffffffffffffffffffffff8091168015611826576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b34610285576000600319360112610285576020600b5463ffffffff6040519160401c168152f35b6008548110156111b1576003906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b3461028557602060031936011261028557600435600854811015610285576118e260609161187e565b5073ffffffffffffffffffffffffffffffffffffffff90818154169160026001830154920154169060405192835260208301526040820152f35b34610285576000600319360112610285576020600e54604051908152f35b346102855760406003193601126102855767ffffffffffffffff6004358181116102855761196c903690600401610ebb565b90602435908111610285573660238201121561028557806004013561199081610ea3565b9161199e6040519384610359565b81835260209160248385019160051b8301019136831161028557602401905b8282106119ce576102838587611a2e565b813581529083019083016119bd565b73ffffffffffffffffffffffffffffffffffffffff6000541633036119fe57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b919091611a396119dd565b8051835103611c125760055460005b8251811015611ae2576064611a81611a70611a69610f94610f7a8689611c97565b5485611cba565b611a7a8489611c97565b5190611cd5565b1115611ab15760046040517f3e996863000000000000000000000000000000000000000000000000000000008152fd5b8061101e610fda611ac5611add9489611c97565b51611ad6610f94610f7a868a611c97565b5490611cba565b611a48565b505090916000905b8251821015611c0d57611afd8282611c97565b51611b0e610f94610f7a8587611c97565b55600093845b600654811015611bc557611b2a61060382611177565b73ffffffffffffffffffffffffffffffffffffffff611b4f61052e610f7a888a611c97565b911614611b65575b611b6090611c6b565b611b14565b9450611bbd611b77610f7a8587611c97565b611b818585611c97565b51611ba9611b8d61038b565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b6020820152611bb787611177565b90611ce2565b600194611b57565b5091611bd6919415611bdd57611c6b565b9092611aea565b61101e611bed610f7a8387611c97565b611bf78388611c97565b51611c03611b8d61038b565b6020820152611d55565b505050565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600019811461139f5760010190565b8051156111b15760200190565b8051600110156111b15760400190565b80518210156111b15760209160051b010190565b90601f19820191821161139f57565b9190820391821161139f57565b906020820180921161139f57565b9190820180921161139f57565b9190611d5057602081611d4973ffffffffffffffffffffffffffffffffffffffff6001945116859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b0151910155565b610b92565b600654906801000000000000000082101561030057611bb78260016103899401600655611177565b90611d8782610ea3565b611d946040519182610359565b828152601f19611da48294610ea3565b0190602036910137565b908160209103126102855751610d6281610953565b6040513d6000823e3d90fd5b6008546801000000000000000081101561030057806001611df3920160085561187e565b611d5057815181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617825561038992600291906040906020810151600186015501511691019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b604090815191611ea18361033d565b600283528260005b828110611eb557505050565b806060602080938501015201611ea9565b610389611fac611f8a604051611edb81610305565b60008152600060208201526000604082015260608082015260606080820152606060a0820152606060c0820152611f19611f13610c14565b8261248d565b611f21611e92565b611f4a7f000000000000000000000000000000000000000000000000000000000000000061303c565b611f5382611c7a565b52611f5d81611c7a565b50611f69600d5461303c565b611f7282611c87565b52611f7c81611c87565b508051611fb1575b506122a7565b600b54600c549167ffffffffffffffff63ffffffff8360401c16921690611fd0565b600e55565b611fbb90826124ce565b38611f84565b90816020910312610285575190565b929060209267ffffffffffffffff9263ffffffff61202960405197889687967f461d276200000000000000000000000000000000000000000000000000000000885216600487015260a0602487015260a4860190610d11565b926001604486015216606484015260848301520381600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156106ef576000916120b2575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b6120ca915060203d8111610735576107268183610359565b38612088565b604051906120dd82610321565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003111561214257565b612109565b6040519061215482610321565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b6001111561214257565b6040519061219782610321565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b604051906121d082610321565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b6040519061220982610321565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b6040519061224282610321565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b6040519061227b82610321565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b6122af61251f565b906122c16122bb6120d0565b83612c67565b6122de81516122cf81612138565b6122d881612138565b836125c1565b6122e96122bb612147565b61230360408201516122fa81612180565b6122d881612180565b61230e6122bb61218a565b61231c606082015183612c67565b60a08101805151612434575b50608081019081515161239c575b60c0915001805151612349575b50515190565b916123556122bb61226e565b61235e82612cec565b60005b83518051821015612389579061101e61237d8261238494611c97565b5185612bb1565b612361565b5050915061239681612d78565b38612343565b6020810180516123ab81612138565b6123b481612138565b1561240a5760c0926123ed612405926123d46123ce6121fc565b88612c67565b516123de81612138565b6123e781612138565b866125c1565b6123fe6123f8612235565b86612c67565b5184612bb1565b612336565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b926124466124406121c3565b84612c67565b61244f83612cec565b60005b8451805182101561247a579061101e61246e8261247594611c97565b5186612c67565b612452565b5050925061248782612d78565b38612328565b8151156124a4576000808252604082015260600152565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b8151156124db5760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b6040519061251282610321565b6000602083606081520152565b60405161252b81610321565b612533612505565b8082526020820160008152612546612505565b506101006020830152604051809252600082526101208201918210610285576000916040525290565b90612578612505565b50601f8116806125a7575b50806020830152604051908183526000825281016020019081106102855760405290565b6020036020811161139f57810180911161139f5738612583565b908151916125cd612505565b50825151600181019081811161139f576020850151811015612626575b60c26020610389965192830101538051821161261e575b50506040519160208301526020825261261982610321565b612bb1565b523880612601565b8160011b948286046002148315171561139f576020816126586103899861265160c29551918461256f565b5082612af5565b50965050506125ea565b908160011b918083046002149015171561139f57565b8181029291811591840414171561139f57565b612693612505565b50805151600181019081811161139f5760208301518110156126cc575b605b602084519283010153805182116126c857505090565b5290565b8160011b8281046002148315171561139f576126f5906126ee8551918661256f565b5084612af5565b506126b0565b612703612505565b50805151600181019081811161139f576020830151811015612738575b605a602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f5761275a906126ee8551918661256f565b50612720565b612768612505565b50805151600181019081811161139f57602083015181101561279d575b6059602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f576127bf906126ee8551918661256f565b50612785565b6127cd612505565b50805151600181019081811161139f576020830151811015612802575b6058602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f57612824906126ee8551918661256f565b506127ea565b612832612505565b50805151600181019081811161139f576020830151811015612867575b607b602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f57612889906126ee8551918661256f565b5061284f565b612897612505565b50805151600181019081811161139f5760208301518110156128cc575b607a602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f576128ee906126ee8551918661256f565b506128b4565b6128fc612505565b50805151600181019081811161139f576020830151811015612931575b6079602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f57612953906126ee8551918661256f565b50612919565b612961612505565b50805151600181019081811161139f576020830151811015612996575b6078602084519283010153805182116126c857505090565b8160011b8281046002148315171561139f576129b8906126ee8551918661256f565b5061297e565b906129c7612505565b50815151600181019182821161139f5760208401518210156129fa575b602084519283010153805182116126c857505090565b8260011b8381046002148415171561139f57612a2390612a1c8651918761256f565b5085612af5565b506129e4565b90612a368251918361256f565b50612a3f612505565b508051612a4a612505565b50612a588251821115612baa565b82515192612a668285611cd5565b926020938285809401518211612ade575b5183815197820101968211612ad6575b505001915b80821015612aae579060001991036101000a0190811990511690825116179052565b909192612aca612ac4612ad09286518152611cc7565b94611cc7565b92611cab565b90612a8c565b523880612a87565b612af0612aea83612662565b82612a29565b612a77565b90612afe612505565b50805190612b0a612505565b50612b188151831115612baa565b82515191612b268184611cd5565b6020928391828701518111612b93575b865183815197820101968211612b8b575b505001915b80821015612b6f579060001991036101000a019081199051169082511617905290565b909192612aca612ac4612b859286518152611cc7565b90612b4c565b523880612b47565b612ba5612b9f82612662565b88612a29565b612b36565b1561028557565b8151612be992919067ffffffffffffffff81169060178211612bec57612be19150604060ff8451921617906129be565b505b51612af5565b50565b5060ff8111612c1157612c0b90612c0383516127c5565b508251612f91565b50612be3565b61ffff8111612c3057612c0b90612c288351612760565b508251612f0d565b63ffffffff8111612c5157612c0b90612c4983516126fb565b508251612e89565b612c0b90612c5f835161268b565b508251612e05565b8151612be992919067ffffffffffffffff81169060178211612c9757612be19150606060ff8451921617906129be565b5060ff8111612cae57612c0b90612c038351612959565b61ffff8111612cc557612c0b90612c2883516128f4565b63ffffffff8111612cde57612c0b90612c49835161288f565b612c0b90612c5f835161282a565b805190612cf7612505565b50815151600181019081811161139f576020840151811015612d45575b609f6020809551928301015380518211612d3d575b5050018051906001820180921161139f5752565b523880612d29565b8160011b938285046002148315171561139f57602081612d6e8297612651609f9551918461256f565b5095505050612d14565b805190612d83612505565b50815151600181019081811161139f576020840151811015612dd2575b60ff6020809551928301015380518211612dca575b505001805190600019820191821161139f5752565b523880612db5565b8160011b938285046002148315171561139f57602081612dfb829761265160ff9551918461256f565b5095505050612da0565b90612e0e612505565b5081515180600801918260081161139f5760208401518311612e68575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000825116179052805182116126c857505090565b8260011b8381046002148415171561139f57612e849085612a29565b612e2b565b90612e92612505565b5081515180600401918260041161139f5760208401518311612eec575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825116179052805182116126c857505090565b8260011b8381046002148415171561139f57612f089085612a29565b612eaf565b90612f16612505565b5081515180600201918260021161139f5760208401518311612f70575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000825116179052805182116126c857505090565b8260011b8381046002148415171561139f57612f8c9085612a29565b612f33565b90612f9a612505565b5081515180600101918260011161139f5760208401518311612ff4575b6001845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825116179052805182116126c857505090565b8260011b8381046002148415171561139f576130109085612a29565b612fb7565b9061301f82610398565b61302c6040519182610359565b828152601f19611da48294610398565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561317e575b506d04ee2d6d415b85acef81000000008083101561316f575b50662386f26fc1000080831015613160575b506305f5e10080831015613151575b5061271080831015613142575b506064821015613132575b600a80921015613128575b6001908160216130d3828701613015565b95860101905b6130e5575b5050505090565b600019849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215613123579190826130d9565b6130de565b91600101916130c2565b91906064600291049101916130b7565b600491939204910191386130ac565b6008919392049101913861309f565b60109193920491019138613090565b6020919392049101913861307e565b604093508104915038613065565b601f8111613198575050565b600090600f82527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802906020601f850160051c830194106131f3575b601f0160051c01915b8281106131e857505050565b8181556001016131dc565b90925082906131d3565b601f8111613209575050565b600090601082527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672906020601f850160051c83019410613264575b601f0160051c01915b82811061325957505050565b81815560010161324d565b9092508290613244565b90815167ffffffffffffffff8111610300576132948161328f600f54610bc1565b61318c565b602080601f83116001146132cf57508192936000926132c4575b50506000198260011b9260031b1c191617600f55565b0151905038806132ae565b90601f19831694613302600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290565b926000905b87821061333f575050836001959610613326575b505050811b01600f55565b015160001960f88460031b161c1916905538808061331b565b80600185968294968601518155019501930190613307565b90815167ffffffffffffffff81116103005761337d81613378601054610bc1565b6131fd565b602080601f83116001146133b857508192936000926133ad575b50506000198260011b9260031b1c191617601055565b015190503880613397565b90601f198316946133eb60106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290565b926000905b87821061342857505083600195961061340f575b505050811b01601055565b015160001960f88460031b161c19169055388080613404565b806001859682949686015181550195019301906133f0565b6040519061344d82610321565b600182527f30000000000000000000000000000000000000000000000000000000000000006020830152565b90816020910312610285575180151581036102855790565b1561349857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e646578206f7574206f6620626f756e6400000000000000000000000000006044820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600654801561354e576000190161353b81611177565b611d505760018160008093550155600655565b6134f6565b9060069161356383548210613491565b8254600019810190811161139f578110156136095760019081810180821161139f5761358e90611177565b509161359982611177565b919091611d5057836135b49483036135b9575b505050611c6b565b613563565b805483547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161783558101549101553880806135ac565b509050610389613525565b600854801561354e576000190161362a8161187e565b611d505760028160008093558260018201550155600855565b9060089161365383548210613491565b8254600019810190811161139f578110156137435760019081810180821161139f5761367e9061187e565b50916136898261187e565b611d5057836136a09482036136a557505050611c6b565b613653565b805482547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617835561373b9380830154908401556002809201541691019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b3880806135ac565b50905061038961361456fea26469706673582212203b48eac9622416fd8dcd24b1280e1c7bcf1d1380b8f5c259da036d5b8fcecfda64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2311,
        "contract": "contracts/Testament.sol:Testament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5912,
        "contract": "contracts/Testament.sol:Testament",
        "label": "isAlive",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5914,
        "contract": "contracts/Testament.sol:Testament",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5917,
        "contract": "contracts/Testament.sol:Testament",
        "label": "timeInterval",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5920,
        "contract": "contracts/Testament.sol:Testament",
        "label": "inheritableTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5924,
        "contract": "contracts/Testament.sol:Testament",
        "label": "shares",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5926,
        "contract": "contracts/Testament.sol:Testament",
        "label": "totalShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5930,
        "contract": "contracts/Testament.sol:Testament",
        "label": "erc20Heirs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(ERC20Heir)5900_storage)dyn_storage"
      },
      {
        "astId": 5936,
        "contract": "contracts/Testament.sol:Testament",
        "label": "erc721Inheritances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 5940,
        "contract": "contracts/Testament.sol:Testament",
        "label": "erc721Heirs",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(ERC721Heir)5907_storage)dyn_storage"
      },
      {
        "astId": 5942,
        "contract": "contracts/Testament.sol:Testament",
        "label": "functionsRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5945,
        "contract": "contracts/Testament.sol:Testament",
        "label": "source",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 5947,
        "contract": "contracts/Testament.sol:Testament",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 5949,
        "contract": "contracts/Testament.sol:Testament",
        "label": "gasLimit",
        "offset": 8,
        "slot": "11",
        "type": "t_uint32"
      },
      {
        "astId": 5951,
        "contract": "contracts/Testament.sol:Testament",
        "label": "donID",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 5953,
        "contract": "contracts/Testament.sol:Testament",
        "label": "requestCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5955,
        "contract": "contracts/Testament.sol:Testament",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 5957,
        "contract": "contracts/Testament.sol:Testament",
        "label": "lastResponse",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 5959,
        "contract": "contracts/Testament.sol:Testament",
        "label": "lastError",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ERC20Heir)5900_storage)dyn_storage": {
        "base": "t_struct(ERC20Heir)5900_storage",
        "encoding": "dynamic_array",
        "label": "struct Testament.ERC20Heir[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ERC721Heir)5907_storage)dyn_storage": {
        "base": "t_struct(ERC721Heir)5907_storage",
        "encoding": "dynamic_array",
        "label": "struct Testament.ERC721Heir[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ERC20Heir)5900_storage": {
        "encoding": "inplace",
        "label": "struct Testament.ERC20Heir",
        "members": [
          {
            "astId": 5897,
            "contract": "contracts/Testament.sol:Testament",
            "label": "heir",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5899,
            "contract": "contracts/Testament.sol:Testament",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC721Heir)5907_storage": {
        "encoding": "inplace",
        "label": "struct Testament.ERC721Heir",
        "members": [
          {
            "astId": 5902,
            "contract": "contracts/Testament.sol:Testament",
            "label": "nft",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5904,
            "contract": "contracts/Testament.sol:Testament",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5906,
            "contract": "contracts/Testament.sol:Testament",
            "label": "heir",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}